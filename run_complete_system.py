"""
üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
"""

import os
import json
from datetime import datetime


def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    test_data = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
    for i in range(50):
        if i < 10:  # 10 —è–≤–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ (–º–∞–≥–∞–∑–∏–Ω—ã)
            item = {
                "accountId": f"–ú–û–®–ï–ù–ù–ò–ö_{i+1:03d}",
                "buildingType": "Apartment",
                "roomsCount": 2,
                "residentsCount": 1,
                "totalArea": 45 + i * 5,
                "consumption": {str(month): 3000 + i * 100 + month * 50 for month in range(1, 13)},
                "address": f"–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è {i+1}",
                "isCommercial": True
            }
        elif i < 15:  # 5 —Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π (–æ—Ñ–∏—Å—ã)
            item = {
                "accountId": f"–û–§–ò–°_{i+1:03d}",
                "buildingType": "House",
                "roomsCount": 3,
                "residentsCount": 2,
                "totalArea": 80 + i * 3,
                "consumption": {
                    # –í—ã—Å–æ–∫–æ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
                    str(month): 2200 + i * 30 + (month % 3) * 20 for month in range(1, 13)
                },
                "address": f"–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –û—Ñ–∏—Å–Ω–∞—è {i+1}",
                "isCommercial": True
            }
        else:  # 35 —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
            base_consumption = 150 + i * 5
            seasonal_multiplier = {
                1: 1.8, 2: 1.6, 3: 1.4, 4: 1.2, 5: 1.0, 6: 0.8,
                7: 0.7, 8: 0.8, 9: 1.0, 10: 1.2, 11: 1.5, 12: 1.7
            }

            item = {
                "accountId": f"–ß–ï–°–¢–ù–´–ô_{i+1:03d}",
                "buildingType": "Apartment" if i % 2 else "House",
                "roomsCount": 2 + (i % 4),
                "residentsCount": 1 + (i % 5),
                "totalArea": 50 + i * 2,
                "consumption": {
                    str(month): int(base_consumption * seasonal_multiplier[month] * (0.9 + (i % 11) * 0.02))
                    for month in range(1, 13)
                },
                "address": f"–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –ñ–∏–ª–∞—è {i+1}",
                "isCommercial": False
            }

        test_data.append(item)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('data/dataset_train.json', 'w', encoding='utf-8') as f:
        json.dump(test_data, f, ensure_ascii=False, indent=2)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É (–º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–æ–º)
    test_subset = test_data[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –æ–±—ä–µ–∫—Ç–æ–≤
    with open('data/dataset_test.json', 'w', encoding='utf-8') as f:
        json.dump(test_subset, f, ensure_ascii=False, indent=2)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_data)} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_subset)} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(
        f"üìä –ú–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {sum(1 for x in test_data if x['isCommercial'])}")


def run_complete_analysis():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    # 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª –∏ –ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("\n1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª...")
    try:
        from analyze_rules import main as analyze_main
        analyze_main()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∞–≤–∏–ª: {e}")

    # 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    print("\n2Ô∏è‚É£ –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏...")
    try:
        from model_training import train_pipeline
        report = train_pipeline(
            train_path='data/dataset_train.json',
            test_path='data/dataset_test.json',
            model_filename='fraud_detection_model.joblib',
            use_gpu=False  # –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        )
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"   üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {report['best_model']}")
        print(f"   üéØ AUC-ROC: {report['best_score']:.4f}")
        print(f"   üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {report['total_features']}")

        if 'test_results' in report:
            best_test = report['test_results'][report['best_model']]
            print(f"   ‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {best_test['accuracy']:.3f}")
            print(f"   ‚úÖ Precision: {best_test['precision']:.3f}")
            print(f"   ‚úÖ Recall: {best_test['recall']:.3f}")
            print(f"   ‚úÖ F1-Score: {best_test['f1']:.3f}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        traceback.print_exc()

    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª...")
    try:
        from test_updated_rules import main as test_main
        test_main()
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    files_to_check = [
        'training_report.json',
        'rules_analysis_results.json',
        'fraud_detection_model.joblib',
        'model_metrics_update.py'
    ]

    for file_name in files_to_check:
        if os.path.exists(file_name):
            size = os.path.getsize(file_name)
            print(f"   ‚úÖ {file_name} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"   ‚ùå {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")


def show_system_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìã –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    if os.path.exists('training_report.json'):
        with open('training_report.json', 'r', encoding='utf-8') as f:
            report = json.load(f)

        print("ü§ñ –ú–û–î–ï–õ–¨ –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"   –ú–æ–¥–µ–ª—å: {report['best_model']}")
        print(f"   AUC-ROC: {report['best_score']:.4f}")
        print(
            f"   –î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: {report.get('training_completed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}")

        if 'best_model_details' in report:
            features = report['best_model_details']['feature_importance'][:5]
            print(f"   –¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            for i, feat in enumerate(features, 1):
                print(
                    f"      {i}. {feat['feature']}: {feat['importance']:.3f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª
    if os.path.exists('rules_analysis_results.json'):
        with open('rules_analysis_results.json', 'r', encoding='utf-8') as f:
            rules = json.load(f)

        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ê–í–ò–õ:")
        if 'dataset_stats' in rules:
            stats = rules['dataset_stats']
            print(
                f"   –û–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_objects', 0):,}")
            print(
                f"   –ú–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats.get('commercial_objects', 0):,}")
            print(f"   –î–æ–ª—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤: {stats.get('fraud_rate', 0):.1%}")

        if 'hidden_patterns' in rules:
            patterns = rules['hidden_patterns']
            if 'combination_rules' in patterns:
                print(
                    f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {len(patterns['combination_rules'])}")
            if 'anomaly_patterns' in patterns:
                print(
                    f"   –ù–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns['anomaly_patterns'])}")

    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
    print("   ‚úÖ –ü–æ–∏—Å–∫ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    print("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ML –º–æ–¥–µ–ª–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è")
    print("   ‚úÖ UI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏–∫–∏")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π 3000+ –∫–í—Ç¬∑—á –∏–∑ –∫–µ–π—Å–∞")
    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: —ç–Ω—Ç—Ä–æ–ø–∏—è, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –ú–û–®–ï–ù–ù–ò–ö–û–í")
    print("=" * 80)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        create_test_data()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        run_complete_analysis()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        show_system_status()

        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("=" * 80)
        print("üìñ –ß—Ç–æ –¥–∞–ª—å—à–µ:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ UI: streamlit run app.py")
        print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤'")
        print("   4. –ò–∑—É—á–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ñ–∞–π–ª–∞—Ö –æ—Ç—á–µ—Ç–æ–≤")

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
