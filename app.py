"""
üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –≤ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏
"""

import streamlit as st
import pandas as pd
import json
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
from datetime import datetime
import numpy as np

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from data_analysis import FraudDataAnalyzer, run_full_analysis
from model_training import train_pipeline
from predictor import FraudPredictor
from ensemble_predictor import EnsemblePredictor
from config import DATA_PATHS, RISK_LEVELS, CAUTION_LEVELS, PROTECTED_CATEGORIES, ENSEMBLE_SETTINGS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤",
    page_icon="üîç",
    layout="wide"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main {padding: 0rem 1rem;}
    .stAlert {margin-top: 1rem;}
    .fraud-card {
        background-color: #ffcccc;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 2px solid #ff0000;
        margin: 0.5rem 0;
    }
    .safe-card {
        background-color: #ccffcc;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 2px solid #00ff00;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)


def to_serializable(val):
    if isinstance(val, np.bool_):
        return bool(val)
    if isinstance(val, (np.integer,)):
        return int(val)
    if isinstance(val, (np.floating,)):
        return float(val)
    if isinstance(val, dict):
        return {k: to_serializable(v) for k, v in val.items()}
    if isinstance(val, list):
        return [to_serializable(v) for v in val]
    return val


def main():
    st.title("üîç –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤")
    st.markdown("**–í—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏**")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üì± –ú–µ–Ω—é")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π
        models = []
        for file in os.listdir('.'):
            if file.endswith('.joblib'):
                models.append(file)

        if models:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(models)}")
            selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", models)
        else:
            st.warning(
                "‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ'")
            selected_model = None

        st.markdown("---")
        st.markdown("""
        ### üìñ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        - **–ú–æ—à–µ–Ω–Ω–∏–∫** ‚Üí üö® –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –±—ã—Ç–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É
        - **–ß–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å** ‚Üí ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
        """)

    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", "üõ°Ô∏è –£–º–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        "üîÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üß† –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    ])

    with tab1:
        render_eda_tab()

    with tab2:
        render_training_tab()

    with tab3:
        render_consensus_tab()

    with tab4:
        render_prediction_tab(selected_model)

    with tab5:
        render_monitoring_tab()

    with tab6:
        render_features_tab()


def render_features_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    st.header("üß† –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π")
    st.markdown(
        "**–ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 50+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏**")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    col1, col2 = st.columns([3, 1])

    with col1:
        st.markdown("""
        ### üìñ –û–±—â–∏–π –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã

        –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Ö —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏:
        - **–ñ–∏–ª–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ** - –Ω–µ–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∑–æ–Ω–∞, –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        - **–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ** - —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥

        –ú–æ—à–µ–Ω–Ω–∏–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ –ª—å–≥–æ—Ç–Ω–æ–º—É –±—ã—Ç–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É.
        """)

    with col2:
        st.info("""
        üí° **–ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è**

        –ú–∞–≥–∞–∑–∏–Ω—ã, –æ—Ñ–∏—Å—ã, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –º–Ω–æ–≥–æ,
        –∞ –æ–±—ã—á–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã - –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞.
        """)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.markdown("## üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cat_tab1, cat_tab2, cat_tab3, cat_tab4, cat_tab5 = st.tabs([
        "üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "üå°Ô∏è –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", "üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        "üè† –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞", "üö© –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"
    ])

    with cat_tab1:
        st.markdown("### üìä –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")

        features_basic = [
            {"name": "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã",
             "fraud_sign": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ (>500 –∫–í—Ç¬∑—á)", "honest_sign": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ (150-400 –∫–í—Ç¬∑—á)"},
            {"name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
             "fraud_sign": "–í—ã—Å–æ–∫–æ–µ (>100 –∫–í—Ç¬∑—á)", "honest_sign": "–ù–∏–∑–∫–æ–µ (<50 –∫–í—Ç¬∑—á)"},
            {"name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –º–µ—Å—è—Ü –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
             "fraud_sign": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ (>800 –∫–í—Ç¬∑—á)", "honest_sign": "–°–µ–∑–æ–Ω–Ω–æ–µ (–¥–æ 600 –∫–í—Ç¬∑—á)"},
            {"name": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∂–∏—Ç–µ–ª—è", "description": "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π",
             "fraud_sign": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ (>250 –∫–í—Ç¬∑—á)", "honest_sign": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ (50-200 –∫–í—Ç¬∑—á)"},
            {"name": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –º¬≤", "description": "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ / –ø–ª–æ—â–∞–¥—å",
             "fraud_sign": "–í—ã—Å–æ–∫–æ–µ (>8 –∫–í—Ç¬∑—á/–º¬≤)", "honest_sign": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ (2-6 –∫–í—Ç¬∑—á/–º¬≤)"}
        ]

        for feature in features_basic:
            with st.expander(f"üìà {feature['name']}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {feature['description']}")
                    st.error(
                        f"üö® **–ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {feature['fraud_sign']}")
                with col2:
                    st.success(
                        f"‚úÖ **–ß–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {feature['honest_sign']}")

    with cat_tab2:
        st.markdown("### üå°Ô∏è –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
        st.warning(
            "üéØ **–ö–õ–Æ–ß–ï–í–û–ô –ö–†–ò–¢–ï–†–ò–ô:** –û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω >3000 –∫–í—Ç¬∑—á - –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è!")

        features_seasonal = [
            {"name": "‚≠ê –û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω (–æ–∫—Ç—è–±—Ä—å-–∞–ø—Ä–µ–ª—å)", "description": "–ì–õ–ê–í–ù–´–ô –ö–†–ò–¢–ï–†–ò–ô: –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–ø–ª–µ–Ω–∏—è",
             "fraud_sign": "–í–´–®–ï 3000 –∫–í—Ç¬∑—á (–∫–ª—é—á–µ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä!)", "honest_sign": "–ù–∏–∂–µ 3000 –∫–í—Ç¬∑—á (–æ–±—ã—á–Ω–æ 200-800)"},
            {"name": "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞", "description": "–ö–∞–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ª–µ—Ç–æ–º –∏ –∑–∏–º–æ–π",
             "fraud_sign": "–ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ (0.8-1.2)", "honest_sign": "–ó–∏–º–æ–π –±–æ–ª—å—à–µ (<0.7)"},
            {"name": "–ó–∏–º–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–µ–∫–∞–±—Ä—å-—Ñ–µ–≤—Ä–∞–ª—å",
             "fraud_sign": "–°—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ (>2500)", "honest_sign": "–°–µ–∑–æ–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ (200-600)"},
            {"name": "–õ–µ—Ç–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏—é–Ω—å-–∞–≤–≥—É—Å—Ç",
             "fraud_sign": "–¢–∞–∫–æ–µ –∂–µ –∫–∞–∫ –∑–∏–º–æ–π (>2000)", "honest_sign": "–ù–∏–∂–µ –∑–∏–º–Ω–µ–≥–æ (100-400)"},
            {"name": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏", "description": "–§–ª–∞–≥ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
             "fraud_sign": "–î–∞ (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)", "honest_sign": "–ù–µ—Ç (–µ—Å—Ç—å –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–∏–∫)"}
        ]

        for feature in features_seasonal:
            with st.expander(f"üå°Ô∏è {feature['name']}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {feature['description']}")
                    st.error(
                        f"üö® **–ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {feature['fraud_sign']}")
                with col2:
                    st.success(
                        f"‚úÖ **–ß–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {feature['honest_sign']}")

        st.info("üí° **–õ–æ–≥–∏–∫–∞:** –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –æ—Ñ–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥, –∞ –¥–æ–º–∞ –∑–∏–º–æ–π —Ç—Ä–∞—Ç—è—Ç –±–æ–ª—å—à–µ –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ")

    with cat_tab3:
        st.markdown("### üìà –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å")

        features_stability = [
            {"name": "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏", "description": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –ø—Ä—ã–≥–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏",
             "fraud_sign": "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π (<0.2)", "honest_sign": "–£–º–µ—Ä–µ–Ω–Ω—ã–π (0.3-0.6)"},
            {"name": "–°—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–§–ª–∞–≥ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è >300 –∫–í—Ç¬∑—á",
             "fraud_sign": "–î–∞", "honest_sign": "–ù–µ—Ç"},
            {"name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫–æ–≤", "description": "–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Å –Ω–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º",
             "fraud_sign": "–ú–∞–ª–æ –∏–ª–∏ –º–Ω–æ–≥–æ", "honest_sign": "2-4 –ø–∏–∫–∞ (–∑–∏–º–∞)"},
            {"name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "description": "–ú–µ—Ä–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º",
             "fraud_sign": "–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ", "honest_sign": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ"},
            {"name": "–¢—Ä–µ–Ω–¥ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "description": "–†–∞—Å—Ç–µ—Ç, –ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
             "fraud_sign": "–ò–¥–µ–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ", "honest_sign": "–ï—Å—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è"}
        ]

        for feature in features_stability:
            with st.expander(f"üìà {feature['name']}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {feature['description']}")
                    st.error(
                        f"üö® **–ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {feature['fraud_sign']}")
                with col2:
                    st.success(
                        f"‚úÖ **–ß–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {feature['honest_sign']}")

        st.info(
            "üí° **–õ–æ–≥–∏–∫–∞:** –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∂–∏–ª—ã–µ - —Å –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏")

    with cat_tab4:
        st.markdown("### üè† –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞")

        features_building = [
            {"name": "–¢–∏–ø –∑–¥–∞–Ω–∏—è", "description": "–ö–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–µ",
             "fraud_sign": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º", "honest_sign": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é"},
            {"name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", "description": "–ß–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ",
             "fraud_sign": "–ú–∞–ª–æ –∫–æ–º–Ω–∞—Ç, –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "honest_sign": "–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"},
            {"name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π", "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∂–∏—Ç–µ–ª–∏",
             "fraud_sign": "–ú–∞–ª–æ –∂–∏—Ç–µ–ª–µ–π, –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "honest_sign": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—Ä—É —Å–µ–º—å–∏"},
            {"name": "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å", "description": "–ü–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö",
             "fraud_sign": "–ú–∞–ª–µ–Ω—å–∫–∞—è –ø–ª–æ—â–∞–¥—å, –±–æ–ª—å—à–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "honest_sign": "–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"},
            {"name": "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "description": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –ø–ª–æ—â–∞–¥–∏ –∏ –∂–∏—Ç–µ–ª—è",
             "fraud_sign": "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", "honest_sign": "–¢–∏–ø–∏—á–Ω–∞—è –¥–ª—è –∂–∏–ª—å—è"}
        ]

        for feature in features_building:
            with st.expander(f"üè† {feature['name']}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {feature['description']}")
                    st.error(
                        f"üö® **–ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {feature['fraud_sign']}")
                with col2:
                    st.success(
                        f"‚úÖ **–ß–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {feature['honest_sign']}")

        st.info(
            "üí° **–õ–æ–≥–∏–∫–∞:** –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–æ–º –∂–∏–ª—å—è –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ")

    with cat_tab5:
        st.markdown("### üö© –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")

        features_suspicious = [
            {"name": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω", "description": "–°–æ–≤–æ–∫—É–ø–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
             "fraud_sign": "–í—ã—Å–æ–∫–∏–π –±–∞–ª–ª (>0.7)", "honest_sign": "–ù–∏–∑–∫–∏–π –±–∞–ª–ª (<0.3)"},
            {"name": "–ù—É–ª–µ–≤—ã–µ –º–µ—Å—è—Ü—ã", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ —Å –Ω—É–ª–µ–≤—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º",
             "fraud_sign": "–ù–µ—Ç (—Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)", "honest_sign": "–ú–æ–≥—É—Ç –±—ã—Ç—å (–æ—Ç–ø—É—Å–∫, –æ—Ç—ä–µ–∑–¥)"},
            {"name": "–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã", "description": "–ú–µ—Å—è—Ü—ã —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º",
             "fraud_sign": "–ù–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ (—Å—Ç–∞–±–∏–ª—å–Ω–æ)", "honest_sign": "–ï—Å—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã"},
            {"name": "–ù–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "description": "–ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
             "fraud_sign": "–í—ã—Å–æ–∫–æ–µ (24/7 —Ä–∞–±–æ—Ç–∞)", "honest_sign": "–ù–∏–∑–∫–æ–µ (—Å–ø—è—Ç –Ω–æ—á—å—é)"},
            {"name": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å", "description": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
             "fraud_sign": "–í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "honest_sign": "–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"}
        ]

        for feature in features_suspicious:
            with st.expander(f"üö© {feature['name']}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {feature['description']}")
                    st.error(
                        f"üö® **–ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è:** {feature['fraud_sign']}")
                with col2:
                    st.success(
                        f"‚úÖ **–ß–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {feature['honest_sign']}")

        st.warning(
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.markdown("## üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", "50+",
                  help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    with col2:
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "85-95%",
                  help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π")
    with col3:
        st.metric("–õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è", "<5%",
                  help="–ü—Ä–æ—Ü–µ–Ω—Ç —á–µ—Å—Ç–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω, –æ—à–∏–±–æ—á–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–∏")

    # –ü—Ä–∏–º–µ—Ä—ã
    st.markdown("## üí° –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã")
    example_col1, example_col2 = st.columns(2)

    with example_col1:
        st.markdown("### üö® –¢–∏–ø–∏—á–Ω—ã–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å")
        st.error("""
        **–†–ï–ê–õ–¨–ù–´–ô –ö–ï–ô–° - –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥ –≤–∏–¥–æ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã:**
        - üéØ **–û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω: 3471 –∫–í—Ç¬∑—á** (>3000 ‚úÖ)
        - –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: 3325 –∫–í—Ç¬∑—á
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: 3000 –∫–í—Ç¬∑—á (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ!)
        - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: 0.059 (—Å–≤–µ—Ä—Ö—Å—Ç–∞–±–∏–ª—å–Ω–æ)
        - –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞: 0.86 (–Ω–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏)
        - –ù–∞ –∂–∏—Ç–µ–ª—è: 3325 –∫–í—Ç¬∑—á (–≤ 44 —Ä–∞–∑–∞ –≤—ã—à–µ –Ω–æ—Ä–º—ã!)
        """)

    with example_col2:
        st.markdown("### ‚úÖ –ß–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è")
        st.success("""
        **–†–ï–ê–õ–¨–ù–´–ô –ö–ï–ô–° - –û–±—ã—á–Ω–∞—è —Å–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫:**
        - üéØ **–û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω: 386 –∫–í—Ç¬∑—á** (<3000 ‚úÖ)
        - –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: 300 –∫–í—Ç¬∑—á
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: 140 –∫–í—Ç¬∑—á (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è)
        - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: 0.373 (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å)
        - –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞: 0.35 (—è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å)
        - –ù–∞ –∂–∏—Ç–µ–ª—è: 75 –∫–í—Ç¬∑—á (–Ω–æ—Ä–º–∞ –¥–ª—è —Å–µ–º—å–∏)
        """)

    st.markdown("---")
    st.info("""
    ### üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

    –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.
    –ù–∏ –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –≤–∞–∂–Ω–∞ –æ–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.

    **–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø:** –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏,
    –∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –±—ã—Ç–æ–≤–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
    """)


def render_eda_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    col1, col2 = st.columns(2)

    with col1:
        train_data_path = st.text_input(
            "–ü—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            value="data/dataset_train.json",
            help="–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (JSON —Ñ–æ—Ä–º–∞—Ç)"
        )

    with col2:
        test_data_path = st.text_input(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            value="",
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    train_exists = os.path.exists(train_data_path)
    test_exists = os.path.exists(test_data_path) if test_data_path else True

    if train_exists and test_exists:
        st.success("‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
    else:
        if not train_exists:
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {train_data_path}")
        if test_data_path and not test_exists:
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_data_path}")

    col1, col2 = st.columns([2, 1])

    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary", disabled=not (train_exists and test_exists)):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
                if test_data_path and os.path.exists(test_data_path):
                    analyzer = run_full_analysis(
                        train_data_path, test_data_path)
                else:
                    analyzer = run_full_analysis(train_data_path, None)
                st.session_state['analyzer'] = analyzer
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    with col2:
        if os.path.exists('eda_report.json'):
            with open('eda_report.json', 'r', encoding='utf-8') as f:
                report = json.load(f)

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                data=json.dumps(report, ensure_ascii=False, indent=2),
                file_name=f"–æ—Ç—á–µ—Ç_–∞–Ω–∞–ª–∏–∑–∞_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if 'analyzer' in st.session_state:
        analyzer = st.session_state['analyzer']

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3, col4 = st.columns(4)

        stats = analyzer.insights['basic_stats']
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", f"{stats['total_objects']:,}")
        with col2:
            st.metric("–í—ã—è–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", f"{stats['fraudsters']:,}")
        with col3:
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", f"{stats['fraud_rate']*100:.1f}%")
        with col4:
            st.metric("–î–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–ª–æ—â–∞–¥–∏",
                      f"{stats['missing_totalArea_pct']:.1f}%")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø
        st.markdown("### üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –∏ —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π")

        if 'group_comparison' in analyzer.insights:
            comparison_data = []
            feature_names = {
                'avg_consumption': '–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)',
                'min_consumption': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)',
                'max_consumption': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)',
                'cv': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è',
                'summer_winter_ratio': '–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞',
                'roomsCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
                'residentsCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π'
            }

            for feature, data in analyzer.insights['group_comparison'].items():
                comparison_data.append({
                    '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': feature_names.get(feature, feature),
                    '–ß–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏': f"{data['honest_mean']:.2f}",
                    '–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏': f"{data['fraud_mean']:.2f}",
                    '–†–∞–∑–Ω–∏—Ü–∞': f"{data['difference_pct']:+.1f}%",
                    '–ó–Ω–∞—á–∏–º–æ—Å—Ç—å': '***' if data['p_value'] < 0.001 else '**' if data['p_value'] < 0.01 else '*' if data['p_value'] < 0.05 else ''
                })

            df_comparison = pd.DataFrame(comparison_data)
            st.dataframe(df_comparison, use_container_width=True)

            st.info(
                "*** - –æ—á–µ–Ω—å –∑–Ω–∞—á–∏–º–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ, ** - –∑–Ω–∞—á–∏–º–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ, * - —Å–ª–∞–±–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.markdown("### üìä –ì—Ä–∞—Ñ–∏–∫–∏")

        viz_col1, viz_col2 = st.columns(2)

        with viz_col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            fig1 = px.box(
                analyzer.df,
                x='isCommercial',
                y='avg_consumption',
                labels={'isCommercial': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        'avg_consumption': '–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)'},
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏"
            )
            fig1.update_xaxes(
                ticktext=['–ß–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏', '–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏'], tickvals=[False, True])
            st.plotly_chart(fig1, use_container_width=True,
                            key="consumption_distribution_box")

        with viz_col2:
            # –ì—Ä–∞—Ñ–∏–∫ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            fig2 = px.scatter(
                analyzer.df,
                x='winter_avg',
                y='summer_avg',
                color='isCommercial',
                labels={
                    'winter_avg': '–ó–∏–º–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)', 'summer_avg': '–õ–µ—Ç–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)'},
                title="–°–µ–∑–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
                color_discrete_map={False: 'blue', True: 'red'}
            )
            fig2.update_traces(name='–ß–µ—Å—Ç–Ω—ã–µ –∂–∏—Ç–µ–ª–∏',
                               selector=dict(marker_color='blue'))
            fig2.update_traces(name='–ù–∞—Ä—É—à–∏—Ç–µ–ª–∏',
                               selector=dict(marker_color='red'))
            # –õ–∏–Ω–∏—è y=x
            max_val = max(analyzer.df['winter_avg'].max(),
                          analyzer.df['summer_avg'].max())
            fig2.add_trace(
                go.Scatter(x=[0, max_val], y=[0, max_val], mode='lines',
                           line=dict(dash='dash', color='gray'),
                           name='–û–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', showlegend=True)
            )
            st.plotly_chart(fig2, use_container_width=True,
                            key="seasonality_scatter_plot")

        # –ü—Ä–∞–≤–∏–ª–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        if 'fraud_rules' in analyzer.insights:
            st.markdown("### üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

            rules_data = []
            for rule_name, rule_info in analyzer.insights['fraud_rules'].items():
                rules_data.append({
                    '–ü—Ä–∞–≤–∏–ª–æ': rule_info['description'],
                    '–¢–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è': f"{rule_info['precision']*100:.1f}%",
                    '–û—Ö–≤–∞—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π': f"{rule_info['recall']*100:.1f}%",
                    '–í—ã—è–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤': f"{rule_info['caught']:,}"
                })

            df_rules = pd.DataFrame(rules_data)
            st.dataframe(df_rules, use_container_width=True)

            st.info(
                "–¢–æ—á–Ω–æ—Å—Ç—å - –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π, –û—Ö–≤–∞—Ç - –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π")

    else:
        st.info("üëÜ –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


def render_training_tab():
    """–í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    st.header("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π")
    st.markdown(
        "**Intelligent ML —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –±—ã—Ç–æ–≤–æ–º—É —Ç–∞—Ä–∏—Ñ—É**")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", expanded=False):
        st.markdown("""
        ### üéØ –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã
        
        –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–∞–µ—Ç **3 —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏** –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
        
        1. **üöÄ CatBoost** - –õ—É—á—à–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–æ–π
        2. **‚ö° XGBoost** - –ë—ã—Å—Ç—Ä—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥, –æ—Ç–ª–∏—á–Ω–æ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å  
        3. **üå≥ Random Forest** - –ù–∞–¥–µ–∂–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å –¥–µ—Ä–µ–≤—å–µ–≤, —É—Å—Ç–æ–π—á–∏–≤ –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é
        
        ### üîç –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:
        - **Feature Engineering:** –°–æ–∑–¥–∞–Ω–∏–µ 50+ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - **–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è:** 5-–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —á–µ—Å—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        - **–ê–≤—Ç–æ–≤—ã–±–æ—Ä:** –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
        - **–ú–µ—Ç—Ä–∏–∫–∏:** –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø–æ–ª–Ω–æ—Ç—ã –∏ F1-score
        """)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### ‚öôÔ∏è –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö")

        train_path = st.text_input(
            "üìä –§–∞–π–ª —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            value=DATA_PATHS['train'],
            help="JSON —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π"
        )

        test_path = st.text_input(
            "üß™ –§–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            value="",
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"
        )

        model_filename = st.text_input(
            "üíæ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            value="fraud_detection_model.joblib",
            help="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"
        )

    with col2:
        st.markdown("### üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")

        use_gpu = st.checkbox(
            "üéÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É (GPU)",
            value=True,
            help="–£—Å–∫–æ—Ä—è–µ—Ç CatBoost –∏ XGBoost –≤ 5-10 —Ä–∞–∑. –¢—Ä–µ–±—É–µ—Ç CUDA-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É"
        )

        if use_gpu:
            st.success("‚úÖ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ")
        else:
            st.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU - –æ–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
            cv_folds = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–¥–æ–≤ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏", 3, 10, 5,
                                 help="–ë–æ–ª—å—à–µ —Ñ–æ–ª–¥–æ–≤ = –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –Ω–æ –¥–æ–ª—å—à–µ –æ–±—É—á–µ–Ω–∏–µ")

            st.markdown("**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:**")
            st.markdown("""
            - **CatBoost**: iterations=1000, depth=6, learning_rate=0.1
            - **XGBoost**: n_estimators=1000, max_depth=6, learning_rate=0.1  
            - **Random Forest**: n_estimators=500, max_depth=10
            """)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    st.markdown("### üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤")

    train_exists = os.path.exists(train_path)
    test_exists = os.path.exists(test_path) if test_path else True

    col1, col2, col3 = st.columns(3)

    with col1:
        if train_exists:
            st.success(f"‚úÖ –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                with open(train_path, 'r', encoding='utf-8') as f:
                    train_data = json.load(f)
                st.info(f"üìä –û–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data)}")
            except:
                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
        else:
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {train_path}")

    with col2:
        if test_path:
            if test_exists:
                st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
                try:
                    with open(test_path, 'r', encoding='utf-8') as f:
                        test_data = json.load(f)
                    st.info(f"üß™ –û–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(test_data)}")
                except:
                    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
            else:
                st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_path}")
        else:
            st.info("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")

    with col3:
        if train_exists and test_exists:
            st.success("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é!")
        else:
            st.error("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤")

    # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    st.markdown("---")

    if st.button("üöÄ –ù–ê–ß–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò", type="primary", disabled=not (train_exists and test_exists)):

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_container = st.container()

        with progress_container:
            st.markdown("### üîÑ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")

            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            overall_progress = st.progress(0)
            status_text = st.empty()

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            details_expander = st.expander(
                "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞", expanded=True)

            with details_expander:
                col1, col2, col3 = st.columns(3)

                with col1:
                    st.markdown("**üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö**")
                    data_status = st.empty()

                with col2:
                    st.markdown("**üîß Feature Engineering**")
                    feature_status = st.empty()

                with col3:
                    st.markdown("**ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π**")
                    model_status = st.empty()

                # –õ–æ–≥ –æ–±—É—á–µ–Ω–∏—è
                log_area = st.empty()

            try:
                # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                status_text.text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
                data_status.info("–ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª—ã...")
                overall_progress.progress(10)

                # –≠—Ç–∞–ø 2: Feature Engineering
                status_text.text(
                    "üîß –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
                feature_status.info("–ò–∑–≤–ª–µ–∫–∞–µ–º 50+ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
                overall_progress.progress(25)

                # –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ
                status_text.text("ü§ñ –û–±—É—á–∞–µ–º 3 –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
                model_status.info("CatBoost, XGBoost, Random Forest...")
                overall_progress.progress(40)

                # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                with st.spinner("–û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):

                    # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
                    report = train_pipeline(
                        train_path=train_path,
                        test_path=test_path if test_path else None,
                        model_filename=model_filename,
                        use_gpu=use_gpu
                    )

                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                overall_progress.progress(100)
                status_text.text("‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

                data_status.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                feature_status.success("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
                model_status.success("‚úÖ –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã")

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.markdown("---")
                st.markdown("## üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")

                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    st.metric(
                        "üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å",
                        report['best_model'],
                        help="–ú–æ–¥–µ–ª—å —Å –Ω–∞–∏–≤—ã—Å—à–∏–º AUC-ROC score"
                    )

                with col2:
                    st.metric(
                        "üéØ AUC-ROC Score",
                        f"{report['best_score']:.4f}",
                        delta=f"{(report['best_score'] - 0.5)*100:+.1f}% vs —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å",
                        help="Area Under Curve - —á–µ–º –±–ª–∏–∂–µ –∫ 1.0, —Ç–µ–º –ª—É—á—à–µ"
                    )

                with col3:
                    st.metric(
                        "üî¢ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ",
                        report['total_features'],
                        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"
                    )

                with col4:
                    training_time = datetime.now().strftime("%H:%M")
                    st.metric(
                        "‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
                        training_time,
                        help="–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                    )

                # –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º
                st.markdown("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")

                results_data = []
                for model_name, results in report['models_results'].items():

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    detailed = results.get('detailed_cv_metrics', {})

                    row_data = {
                        '–ú–æ–¥–µ–ª—å': model_name,
                        'AUC-ROC': f"{results['cv_mean_auc']:.4f}",
                        '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': f"¬±{results['cv_std_auc']:.4f}",
                        '–¢–æ—á–Ω–æ—Å—Ç—å': f"{detailed.get('accuracy', 0):.3f}",
                        'Precision': f"{detailed.get('precision', 0):.3f}",
                        'Recall': f"{detailed.get('recall', 0):.3f}",
                        'F1-Score': f"{detailed.get('f1', 0):.3f}"
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'test_results' in report and model_name in report['test_results']:
                        test_res = report['test_results'][model_name]
                        row_data['AUC-ROC (—Ç–µ—Å—Ç)'] = f"{test_res['auc']:.4f}"
                        row_data['–¢–æ—á–Ω–æ—Å—Ç—å (—Ç–µ—Å—Ç)'] = f"{test_res['accuracy']:.3f}"

                    results_data.append(row_data)

                df_results = pd.DataFrame(results_data)

                # –í—ã–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                def highlight_best_model(row):
                    if row['–ú–æ–¥–µ–ª—å'] == report['best_model']:
                        return ['background-color: #90EE90'] * len(row)
                    return [''] * len(row)

                st.dataframe(
                    df_results.style.apply(highlight_best_model, axis=1),
                    use_container_width=True
                )

                st.info(
                    "üí° –ó–µ–ª–µ–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

                # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                if 'best_model_details' in report and 'feature_importance' in report['best_model_details']:
                    st.markdown("### üß† –°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

                    feature_importance = report['best_model_details']['feature_importance'][:15]

                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                    feature_translations = {
                        'heating_season': 'üå°Ô∏è –û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω',
                        'avg_consumption': 'üìä –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                        'min_consumption': 'üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                        'max_consumption': 'üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                        'cv': 'üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏',
                        'summer_winter_ratio': 'üåû –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞',
                        'consumption_per_resident': 'üë• –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∂–∏—Ç–µ–ª—è',
                        'consecutive_high': 'üî• –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–æ–∫–∏–µ –º–µ—Å—è—Ü—ã',
                        'consumption_entropy': 'üåÄ –≠–Ω—Ç—Ä–æ–ø–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è',
                        'quarter_stability': 'üìÜ –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
                        'no_seasonality': 'üö´ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏',
                        'stable_high_consumption': '‚öñÔ∏è –°—Ç–∞–±–∏–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'
                    }

                    df_importance = pd.DataFrame(feature_importance)
                    df_importance['feature_ru'] = df_importance['feature'].map(
                        lambda x: feature_translations.get(x, x)
                    )

                    fig = px.bar(
                        df_importance.head(10),
                        x='importance',
                        y='feature_ru',
                        orientation='h',
                        title="–¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                        labels={'importance': '–í–∞–∂–Ω–æ—Å—Ç—å',
                                'feature_ru': '–ü—Ä–∏–∑–Ω–∞–∫'},
                        color='importance',
                        color_continuous_scale='viridis'
                    )
                    fig.update_layout(
                        yaxis={'categoryorder': 'total ascending'})
                    st.plotly_chart(fig, use_container_width=True,
                                    key="training_feature_importance")

                    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏
                    with st.expander("üí° –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
                        st.markdown("""
                        **–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∞** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:
                        
                        - **–í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (>0.1)**: –ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤
                        - **–°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å (0.05-0.1)**: –í–∞–∂–Ω—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫  
                        - **–ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (<0.05)**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        
                        –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–¥–µ–ª—å –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è.
                        """)

                # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
                if 'best_model_details' in report:
                    best_metrics = report['models_results'][report['best_model']
                                                            ]['detailed_cv_metrics']

                    if 'confusion_matrix' in best_metrics:
                        st.markdown("### üéØ –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")

                        cm = np.array(best_metrics['confusion_matrix'])

                        col1, col2 = st.columns([1, 1])

                        with col1:
                            st.markdown("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**")

                            total = cm.sum()
                            tn, fp, fn, tp = cm.ravel()

                            st.metric("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–µ—Å—Ç–Ω—ã–µ", f"{tn:,}",
                                      delta=f"{tn/total*100:.1f}% –æ—Ç –≤—Å–µ—Ö")
                            st.metric("üö® –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏", f"{tp:,}",
                                      delta=f"{tp/total*100:.1f}% –æ—Ç –≤—Å–µ—Ö")
                            st.metric("‚ö†Ô∏è –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è", f"{fp:,}",
                                      delta=f"{fp/total*100:.1f}% –æ—Ç –≤—Å–µ—Ö")
                            st.metric("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏", f"{fn:,}",
                                      delta=f"{fn/total*100:.1f}% –æ—Ç –≤—Å–µ—Ö")

                        with col2:
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
                            fig = px.imshow(
                                cm,
                                labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å",
                                            y="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å"),
                                x=['–ß–µ—Å—Ç–Ω—ã–µ', '–ú–æ—à–µ–Ω–Ω–∏–∫–∏'],
                                y=['–ß–µ—Å—Ç–Ω—ã–µ', '–ú–æ—à–µ–Ω–Ω–∏–∫–∏'],
                                title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫",
                                text_auto=True,
                                color_continuous_scale='Blues'
                            )
                            st.plotly_chart(
                                fig, use_container_width=True, key="training_confusion_matrix")

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
                st.markdown("### üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

                col1, col2 = st.columns(2)

                with col1:
                    st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: `{model_filename}`")
                    st.info("üîÑ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

                with col2:
                    st.markdown("**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**")
                    st.markdown("""
                    1. üîÆ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"**
                    2. üìà –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ **"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"**
                    3. üß† –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ **"–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"**
                    """)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏",
                    data=json.dumps(report, ensure_ascii=False, indent=2),
                    file_name=f"training_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")
                st.markdown("**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**")
                st.markdown("""
                - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª–µ
                - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                - –ü—Ä–æ–±–ª–µ–º—ã —Å GPU –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏ (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å GPU)
                - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
                """)

                with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"):
                    st.code(str(e))


def render_prediction_tab(selected_model):
    """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    st.header("üîÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è")

    if not selected_model:
        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
        return

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
    st.markdown("### üß† –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞")

    predictor_col1, predictor_col2 = st.columns([2, 1])

    with predictor_col1:
        # –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–Ω—Å–∞–º–±–ª—å –Ω–∞–ø—Ä—è–º—É—é
        if selected_model.endswith('_ensemble.joblib'):
            ensemble_path = selected_model
            use_ensemble = True
            st.info("üß† –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∞–Ω—Å–∞–º–±–ª—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –º–æ–¥–µ–ª–µ–π")
            caution_level = st.selectbox(
                "üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π:",
                options=['conservative', 'balanced',
                         'ultra_safe', 'aggressive'],
                index=0,
                format_func=lambda x: {
                    'aggressive': '‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π (–±–æ–ª—å—à–µ –Ω–∞—Ö–æ–¥–∏–º)',
                    'balanced': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
                    'conservative': 'üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π (–∑–∞—â–∏—Ç–∞ —á–µ—Å—Ç–Ω—ã—Ö)',
                    'ultra_safe': 'üö® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞'
                }[x]
            )
            st.success(
                "‚úÖ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ - –≤—Å–µ 3 –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ")
        else:
            ensemble_path = selected_model.replace(
                '.joblib', '_ensemble.joblib')
            use_ensemble = False
            if os.path.exists(ensemble_path):
                use_ensemble = st.checkbox(
                    "ü§ù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω—Å–∞–º–±–ª—å —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                    value=True,
                    help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç 3 –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π"
                )
                if use_ensemble:
                    caution_level = st.selectbox(
                        "üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π:",
                        options=['conservative', 'balanced',
                                 'ultra_safe', 'aggressive'],
                        index=0,
                        format_func=lambda x: {
                            'aggressive': '‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π (–±–æ–ª—å—à–µ –Ω–∞—Ö–æ–¥–∏–º)',
                            'balanced': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
                            'conservative': 'üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π (–∑–∞—â–∏—Ç–∞ —á–µ—Å—Ç–Ω—ã—Ö)',
                            'ultra_safe': 'üö® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞'
                        }[x]
                    )
                    st.success(
                        "‚úÖ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ - –≤—Å–µ 3 –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ")
                else:
                    st.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)")
            else:
                st.warning(
                    "‚ö†Ô∏è –ê–Ω—Å–∞–º–±–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å")
                st.info("üí° –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è")

    with predictor_col2:
        if use_ensemble and os.path.exists(ensemble_path):
            st.markdown("### üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã")
            from config import CAUTION_LEVELS, PROTECTED_CATEGORIES
            settings = CAUTION_LEVELS[caution_level]
            st.metric("–ü–æ—Ä–æ–≥ —Ä–µ—à–µ–Ω–∏—è", f"{settings['threshold']:.2f}")
            st.metric("–û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                      f"{settings['expected_precision']:.0%}")
            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—â–∏—Ç
            disable_all_protection = st.checkbox(
                "–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã (raw-—Ä–µ–∂–∏–º, —Ç–æ–ª—å–∫–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π)",
                value=False,
                help="–ë–µ–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞, –±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤, –±–µ–∑ –∑–∞—â–∏—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –¢–æ–ª—å–∫–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π."
            )
            # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã —É—è–∑–≤–∏–º—ã—Ö –≥—Ä—É–ø–ø (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –∑–∞—â–∏—Ç—ã)
            if not disable_all_protection:
                disable_protection = st.checkbox(
                    "–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É —É—è–∑–≤–∏–º—ã—Ö –≥—Ä—É–ø–ø (—É–º–Ω–∞—è –∑–∞—â–∏—Ç–∞)",
                    value=not PROTECTED_CATEGORIES['enable_protection']
                )
                PROTECTED_CATEGORIES['enable_protection'] = not disable_protection
            else:
                PROTECTED_CATEGORIES['enable_protection'] = False
        else:
            st.markdown("### üìä –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")
            st.metric("–ü–æ—Ä–æ–≥ —Ä–µ—à–µ–Ω–∏—è", "0.50")
            st.metric("–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞", "–û–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å")

    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
    st.markdown("### üìÅ –°–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
    input_method = st.radio(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏?",
        ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é",
            "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä"]
    )

    # –ù–æ–≤—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏)
    show_short = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ isCommercial (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)", value=False,
                             help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ isCommercial –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏.")
    detailed = not show_short

    if input_method == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['json'])

        if uploaded_file is not None:
            data = json.load(uploaded_file)

            if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã..."):
                    if use_ensemble and os.path.exists(ensemble_path):
                        predictor = EnsemblePredictor(
                            ensemble_path, caution_level)
                        results = predictor.predict(
                            data, require_consensus=not disable_all_protection, detailed=not show_short)
                    else:
                        predictor = FraudPredictor(selected_model)
                        results = predictor.predict(data, detailed=detailed)

                    st.session_state['predictions'] = results
                    st.session_state['used_ensemble'] = use_ensemble
                    st.success(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(results)} –æ–±—ä–µ–∫—Ç–æ–≤")

    elif input_method == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é":
        col1, col2 = st.columns(2)

        with col1:
            account_id = st.text_input("–ù–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞", value="–¢–ï–°–¢001")
            building_type_map = {
                "–ö–≤–∞—Ä—Ç–∏—Ä–∞": "Apartment",
                "–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º": "House",
                "–î—Ä—É–≥–æ–µ": "Other"
            }
            building_type_ru = st.selectbox(
                "–¢–∏–ø –∂–∏–ª—å—è", list(building_type_map.keys()))
            building_type = building_type_map[building_type_ru]

            rooms = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", min_value=1, max_value=10, value=3)
            residents = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö", min_value=1, max_value=10, value=2)
            area = st.number_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)",
                                   min_value=0.0, max_value=500.0, value=75.0)

        with col2:
            st.markdown(
                "**–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∫–í—Ç¬∑—á –≤ –º–µ—Å—è—Ü):**")
            winter = st.number_input(
                "–ó–∏–º–∞ (–¥–µ–∫–∞–±—Ä—å-—Ñ–µ–≤—Ä–∞–ª—å)", min_value=0, max_value=2000, value=300)
            spring = st.number_input(
                "–í–µ—Å–Ω–∞ (–º–∞—Ä—Ç-–º–∞–π)", min_value=0, max_value=2000, value=200)
            summer = st.number_input(
                "–õ–µ—Ç–æ (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç)", min_value=0, max_value=2000, value=150)
            autumn = st.number_input(
                "–û—Å–µ–Ω—å (—Å–µ–Ω—Ç—è–±—Ä—å-–Ω–æ—è–±—Ä—å)", min_value=0, max_value=2000, value=250)

        if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", type="primary"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
            consumption = {
                "1": winter, "2": winter, "3": spring, "4": spring, "5": spring,
                "6": summer, "7": summer, "8": summer, "9": autumn, "10": autumn,
                "11": autumn, "12": winter
            }

            data = [{
                "accountId": account_id,
                "buildingType": building_type,
                "roomsCount": rooms,
                "residentsCount": residents,
                "totalArea": area if area > 0 else None,
                "consumption": consumption,
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            }]

            if use_ensemble and os.path.exists(ensemble_path):
                predictor = EnsemblePredictor(ensemble_path, caution_level)
                results = predictor.predict(
                    data, require_consensus=not disable_all_protection, detailed=not show_short)
            else:
                predictor = FraudPredictor(selected_model)
                results = predictor.predict(data, detailed=detailed)

            st.session_state['predictions'] = results
            st.session_state['used_ensemble'] = use_ensemble

    elif input_method == "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä":
        examples = {
            "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥ –≤–∏–¥–æ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å)": {
                "accountId": "–ú–ê–ì–ê–ó–ò–ù001",
                "buildingType": "Apartment",
                "roomsCount": 2,
                "residentsCount": 1,
                "totalArea": 50,
                "consumption": {str(i): 600 for i in range(1, 13)},
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            },
            "üè† –û–±—ã—á–Ω–∞—è —Å–µ–º—å—è (—á–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å)": {
                "accountId": "–°–ï–ú–¨–Ø001",
                "buildingType": "House",
                "roomsCount": 4,
                "residentsCount": 4,
                "totalArea": 120,
                "consumption": {
                    "1": 400, "2": 350, "3": 300, "4": 250, "5": 200,
                    "6": 150, "7": 150, "8": 180, "9": 250, "10": 300,
                    "11": 350, "12": 400
                },
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            }
        }

        selected_example = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", list(examples.keys()))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∞
        example_data = examples[selected_example]
        st.json({
            "–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç": example_data["accountId"],
            "–¢–∏–ø –∑–¥–∞–Ω–∏—è": "–ö–≤–∞—Ä—Ç–∏—Ä–∞" if example_data["buildingType"] == "Apartment" else "–î–æ–º",
            "–ö–æ–º–Ω–∞—Ç": example_data["roomsCount"],
            "–ñ–∏—Ç–µ–ª–µ–π": example_data["residentsCount"],
            "–ü–ª–æ—â–∞–¥—å": example_data["totalArea"],
            "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∏–º–æ–π": example_data["consumption"]["1"],
            "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ª–µ—Ç–æ–º": example_data["consumption"]["7"]
        })

        if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ—Ä", type="primary"):
            if use_ensemble and os.path.exists(ensemble_path):
                predictor = EnsemblePredictor(ensemble_path, caution_level)
                results = predictor.predict(
                    [examples[selected_example]], require_consensus=not disable_all_protection, detailed=not show_short)
            else:
                predictor = FraudPredictor(selected_model)
                results = predictor.predict(
                    [examples[selected_example]], detailed=detailed)

            st.session_state['predictions'] = results
            st.session_state['used_ensemble'] = use_ensemble

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'predictions' in st.session_state:
        results = st.session_state['predictions']
        used_ensemble = st.session_state.get('used_ensemble', False)

        st.markdown("### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–µ—Ç–æ–¥
        if used_ensemble:
            st.success(
                "ü§ù **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ 3 –º–æ–¥–µ–ª–µ–π**")
        else:
            st.info("üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏**")

        # –°–≤–æ–¥–∫–∞
        if used_ensemble:
            # –î–ª—è –∞–Ω—Å–∞–º–±–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total = len(results)
            fraudsters = sum(1 for r in results if r['isCommercial'])
            consensus_cases = sum(1 for r in results if r.get(
                'consensus_details', {}).get('consensus_reached', False))
            protected_cases = sum(1 for r in results if r.get(
                'protection_applied', False))

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤", f"{total:,}")
            with col2:
                st.metric("–í—ã—è–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", f"{fraudsters:,}")
            with col3:
                st.metric("–ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç", f"{consensus_cases:,}")
            with col4:
                st.metric("–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞", f"{protected_cases:,}")
        else:
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report = FraudPredictor(selected_model).generate_report(results)

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤",
                          f"{report['summary']['total_analyzed']:,}")
            with col2:
                st.metric("–í—ã—è–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π",
                          f"{report['summary']['fraudsters_detected']:,}")
            with col3:
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π",
                          f"{report['summary']['fraud_rate']:.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.markdown("### üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        for result in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ï—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ—Ç risk_level), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            if 'risk_level' not in result:
                card_class = "fraud-card" if result.get(
                    'isCommercial') else "safe-card"
                icon = "üö®" if result.get('isCommercial') else "‚úÖ"
                card_content = f"""
                <div class="{card_class}">
                    <h4>{icon} –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: {result.get('accountId', '')}</h4>
                    <p><strong>isCommercial:</strong> {result.get('isCommercial')}</p>
                    <p><strong>–ê–¥—Ä–µ—Å:</strong> {result.get('address', '')}</p>
                    <p><strong>–¢–∏–ø –∑–¥–∞–Ω–∏—è:</strong> {result.get('buildingType', '')}</p>
                    <p><strong>–ö–æ–º–Ω–∞—Ç:</strong> {result.get('roomsCount', '')}</p>
                    <p><strong>–ñ–∏—Ç–µ–ª–µ–π:</strong> {result.get('residentsCount', '')}</p>
                    <p><strong>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:</strong> {json.dumps(result.get('consumption', {}), ensure_ascii=False)}</p>
                </div>
                """
                st.markdown(card_content, unsafe_allow_html=True)
                continue
            # –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
            card_class = "fraud-card" if result.get(
                'isCommercial') else "safe-card"
            icon = "üö®" if result.get('isCommercial') else "‚úÖ"
            risk_level_ru = {
                'HIGH': '–í–´–°–û–ö–ò–ô',
                'MEDIUM': '–°–†–ï–î–ù–ò–ô',
                'LOW': '–ù–ò–ó–ö–ò–ô',
                'MINIMAL': '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô'
            }.get(result['risk_level'], result['risk_level']) if 'risk_level' in result else ''
            card_content = f"""
            <div class="{card_class}">
                <h4>{icon} –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: {result.get('accountId', '')}</h4>
                <p><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:</strong> {result.get('fraud_probability_percent', '')}</p>
                <p><strong>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> {risk_level_ru}</p>
                <p><strong>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:</strong> {result.get('interpretation', '')}</p>
            """
            if used_ensemble and 'consensus_details' in result:
                consensus = result['consensus_details']
                protection_info = ""
                if result.get('protection_applied', False):
                    protection_reasons = result.get('protection_reasons', [])
                    protection_info = f"""
                    <div style="background-color: #e8f4fd; padding: 10px; margin: 5px 0; border-radius: 5px;">
                        <p><strong>üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∑–∞—â–∏—Ç–∞:</strong> {', '.join(protection_reasons)}</p>
                        <p><strong>üéØ –ü–æ—Ä–æ–≥ —Å –∑–∞—â–∏—Ç–æ–π:</strong> {result.get('threshold_used', 0):.2f}</p>
                    </div>
                    """
                card_content += f"""
                <div style="background-color: #f0f8ff; padding: 10px; margin: 5px 0; border-radius: 5px;">
                    <p><strong>ü§ù –ö–æ–Ω—Å–µ–Ω—Å—É—Å –º–æ–¥–µ–ª–µ–π:</strong> {consensus.get('agreement_level', '')}</p>
                    <p><strong>üó≥Ô∏è –ì–æ–ª–æ—Å–∞:</strong> {consensus.get('positive_votes', '')} | <strong>–ú–µ—Ç–æ–¥:</strong> {consensus.get('decision_method', '')}</p>
                    <p><strong>‚úÖ –ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç:</strong> {'–î–∞' if consensus.get('consensus_reached') else '–ù–µ—Ç'}</p>
                </div>
                {protection_info}
                """
                if 'individual_models' in result:
                    individual_info = "<p><strong>üß† –†–µ—à–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:</strong></p><ul>"
                    for model_name, model_decision in result['individual_models'].items():
                        decision_icon = "‚úÖ" if model_decision.get(
                            'decision') else "‚ùå"
                        individual_info += f"<li>{decision_icon} <strong>{model_name}:</strong> {model_decision.get('probability', 0):.3f} (–ø–æ—Ä–æ–≥: {model_decision.get('threshold_used', 0):.2f})</li>"
                    individual_info += "</ul>"
                    card_content += individual_info
            else:
                if 'patterns' in result:
                    consumption_level_ru = {
                        '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ',
                        '–í—ã—Å–æ–∫–æ–µ': '–í—ã—Å–æ–∫–æ–µ',
                        '–°—Ä–µ–¥–Ω–µ–µ': '–°—Ä–µ–¥–Ω–µ–µ',
                        '–ù–∏–∑–∫–æ–µ': '–ù–∏–∑–∫–æ–µ'
                    }.get(result['patterns'].get('consumption_level', ''), result['patterns'].get('consumption_level', ''))
                    card_content += f"""
                    <p><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:</strong></p>
                    <ul>
                        <li>–£—Ä–æ–≤–µ–Ω—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {consumption_level_ru}</li>
                        <li>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {result['patterns'].get('seasonality', '')}</li>
                        <li>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result['patterns'].get('stability', '')}</li>
                    </ul>
                    """
            card_content += "</div>"
            st.markdown(card_content, unsafe_allow_html=True)

        # –≠–∫—Å–ø–æ—Ä—Ç
        st.markdown("### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç (JSON)",
                data=json.dumps(to_serializable(results),
                                ensure_ascii=False, indent=2),
                file_name=f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø—Ä–æ–≤–µ—Ä–∫–∏_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ isCommercial)
        if 'show_short' in locals() and show_short:
            def filter_short_format(results):
                filtered = []
                for r in results:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫: accountId, isCommercial, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è
                    out = {}
                    if 'accountId' in r:
                        out['accountId'] = r['accountId']
                        out['isCommercial'] = r['isCommercial']
                    for k, v in r.items():
                        if k not in out and k != 'isCommercial':
                            out[k] = v
                    filtered.append(out)
                return filtered
            with col2:
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ isCommercial (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)",
                    data=json.dumps(to_serializable(filter_short_format(
                        results)), ensure_ascii=False, indent=2),
                    file_name=f"isCommercial_only_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
        else:
            with col2:
                # CSV —ç–∫—Å–ø–æ—Ä—Ç (–ø–æ–¥—Ä–æ–±–Ω—ã–π)
                df_export = pd.DataFrame([{
                    '–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç': r['accountId'],
                    '–ù–∞—Ä—É—à–∏—Ç–µ–ª—å': '–î–∞' if r['isCommercial'] else '–ù–µ—Ç',
                    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è': f"{r['fraud_probability']:.2%}",
                    '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': {
                        'HIGH': '–í–´–°–û–ö–ò–ô',
                        'MEDIUM': '–°–†–ï–î–ù–ò–ô',
                        'LOW': '–ù–ò–ó–ö–ò–ô',
                        'MINIMAL': '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô'
                    }.get(r['risk_level'], r['risk_level'])
                } for r in results])

                csv = df_export.to_csv(index=False)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (CSV)",
                    data=csv,
                    file_name=f"—Ç–∞–±–ª–∏—Ü–∞_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )


def render_monitoring_tab():
    """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    st.header("üìà –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if os.path.exists('training_report.json'):
        with open('training_report.json', 'r', encoding='utf-8') as f:
            training_report = json.load(f)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.markdown("### ü§ñ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å", training_report['best_model'])
        with col2:
            st.metric("AUC-ROC", f"{training_report['best_score']:.4f}")
        with col3:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", training_report['total_features'])
        with col4:
            training_date = training_report.get(
                'training_completed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if training_date != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                training_date = training_date.split('T')[0]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
            st.metric("–î–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è", training_date)

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
        if 'best_model_details' in training_report:
            st.markdown("### üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")

            metrics = training_report['models_results'][training_report['best_model']
                                                        ]['detailed_cv_metrics']

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", f"{metrics['accuracy']:.3f}")
            with col2:
                st.metric("Precision", f"{metrics['precision']:.3f}")
            with col3:
                st.metric("Recall", f"{metrics['recall']:.3f}")
            with col4:
                st.metric("F1-Score", f"{metrics['f1']:.3f}")

            # Confusion Matrix
            if 'confusion_matrix' in metrics:
                st.markdown("#### üéØ –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
                cm = np.array(metrics['confusion_matrix'])

                col1, col2 = st.columns([1, 2])
                with col1:
                    st.text(f"""
–ò—Å—Ç–∏–Ω–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: {cm[0, 0]:,}
–õ–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: {cm[0, 1]:,}
–õ–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: {cm[1, 0]:,}
–ò—Å—Ç–∏–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: {cm[1, 1]:,}
                    """)

                with col2:
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è confusion matrix
                    try:
                        import matplotlib.pyplot as plt
                        import seaborn as sns

                        fig, ax = plt.subplots(figsize=(6, 4))
                        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                                    xticklabels=['–ß–µ—Å—Ç–Ω—ã–µ', '–ú–æ—à–µ–Ω–Ω–∏–∫–∏'],
                                    yticklabels=['–ß–µ—Å—Ç–Ω—ã–µ', '–ú–æ—à–µ–Ω–Ω–∏–∫–∏'], ax=ax)
                        ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
                        ax.set_ylabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å')
                        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å')
                        st.pyplot(fig)
                    except ImportError:
                        st.info(
                            "üìä –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib –∏ seaborn")

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        if 'models_results' in training_report:
            st.markdown("### üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")

            models_data = []
            for model, results in training_report['models_results'].items():
                detailed_metrics = results.get('detailed_cv_metrics', {})
                models_data.append({
                    '–ú–æ–¥–µ–ª—å': model,
                    'AUC-ROC': results['cv_mean_auc'],
                    '–¢–æ—á–Ω–æ—Å—Ç—å': detailed_metrics.get('accuracy', 0),
                    'Precision': detailed_metrics.get('precision', 0),
                    'Recall': detailed_metrics.get('recall', 0),
                    'F1-Score': detailed_metrics.get('f1', 0)
                })

            df_models = pd.DataFrame(models_data)

            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            fig = px.bar(
                df_models,
                x='–ú–æ–¥–µ–ª—å',
                y='AUC-ROC',
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ AUC-ROC",
                labels={'AUC-ROC': 'AUC-ROC Score'},
                color='AUC-ROC',
                color_continuous_scale='RdYlGn',
                text='AUC-ROC'
            )
            fig.update_traces(
                texttemplate='%{text:.3f}', textposition='outside')
            st.plotly_chart(fig, use_container_width=True,
                            key="models_comparison_chart")

            # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
            st.markdown("#### üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º")
            df_models_formatted = df_models.copy()
            for col in ['AUC-ROC', '–¢–æ—á–Ω–æ—Å—Ç—å', 'Precision', 'Recall', 'F1-Score']:
                df_models_formatted[col] = df_models_formatted[col].apply(
                    lambda x: f"{x:.3f}")
            st.dataframe(df_models_formatted, use_container_width=True)

        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if 'best_model_details' in training_report and 'feature_importance' in training_report['best_model_details']:
            st.markdown("### üß† –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")

            feature_importance = training_report['best_model_details']['feature_importance'][:15]

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            feature_translations = {
                'heating_season': '–û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω',
                'avg_consumption': '–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                'min_consumption': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                'max_consumption': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ',
                'cv': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏',
                'summer_winter_ratio': '–û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞',
                'consumption_per_resident': '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∂–∏—Ç–µ–ª—è',
                'consecutive_high': '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–æ–∫–∏–µ –º–µ—Å—è—Ü—ã',
                'consumption_entropy': '–≠–Ω—Ç—Ä–æ–ø–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è',
                'quarter_stability': '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'
            }

            df_importance = pd.DataFrame(feature_importance)
            df_importance['feature_ru'] = df_importance['feature'].map(
                lambda x: feature_translations.get(x, x)
            )

            fig = px.bar(
                df_importance.head(10),
                x='importance',
                y='feature_ru',
                orientation='h',
                title="–¢–æ–ø-10 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                labels={'importance': '–í–∞–∂–Ω–æ—Å—Ç—å', 'feature_ru': '–ü—Ä–∏–∑–Ω–∞–∫'},
                color='importance',
                color_continuous_scale='viridis'
            )
            fig.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig, use_container_width=True,
                            key="feature_importance_chart")

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'test_results' in training_report:
            st.markdown("### üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ")

            test_data = []
            for model, results in training_report['test_results'].items():
                test_data.append({
                    '–ú–æ–¥–µ–ª—å': model,
                    'AUC-ROC': results['auc'],
                    '–¢–æ—á–Ω–æ—Å—Ç—å': results['accuracy'],
                    'Precision': results['precision'],
                    'Recall': results['recall'],
                    'F1-Score': results['f1']
                })

            df_test = pd.DataFrame(test_data)

            for col in ['AUC-ROC', '–¢–æ—á–Ω–æ—Å—Ç—å', 'Precision', 'Recall', 'F1-Score']:
                df_test[col +
                        '_formatted'] = df_test[col].apply(lambda x: f"{x:.3f}")

            st.dataframe(df_test[['–ú–æ–¥–µ–ª—å'] + [col + '_formatted' for col in ['AUC-ROC', '–¢–æ—á–Ω–æ—Å—Ç—å', 'Precision', 'Recall', 'F1-Score']]],
                         use_container_width=True)

        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if 'data_analysis' in training_report:
            st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

            data_stats = training_report['data_analysis']

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –æ–±—Ä–∞–∑—Ü–æ–≤",
                          f"{data_stats.get('total_samples', 0):,}")
            with col2:
                st.metric(
                    "–ú–æ—à–µ–Ω–Ω–∏–∫–∏", f"{data_stats.get('positive_samples', 0):,}")
            with col3:
                fraud_rate = data_stats.get('positive_rate', 0)
                st.metric("–î–æ–ª—è –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤", f"{fraud_rate:.1%}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if 'predictions' in st.session_state:
        st.markdown("### üîÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")

        results = st.session_state['predictions']

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total = len(results)
        fraudsters = sum(1 for r in results if r['isCommercial'])

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤", f"{total:,}")
        with col2:
            st.metric("–í—ã—è–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", f"{fraudsters:,}")
        with col3:
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π",
                      f"{fraudsters/total*100:.1f}%" if total > 0 else "0%")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫–∞–º –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        risk_distribution = {}
        for result in results:
            risk_level = result.get('risk_level')
            if risk_level is not None:
                risk_distribution[risk_level] = risk_distribution.get(
                    risk_level, 0) + 1

        risk_data = []
        for level, count in risk_distribution.items():
            risk_data.append({
                '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': {
                    'HIGH': '–í–´–°–û–ö–ò–ô',
                    'MEDIUM': '–°–†–ï–î–ù–ò–ô',
                    'LOW': '–ù–ò–ó–ö–ò–ô',
                    'MINIMAL': '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô'
                }.get(level, level),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                '–ü—Ä–æ—Ü–µ–Ω—Ç': count / total * 100 if total > 0 else 0
            })

        if risk_data:
            df_risk = pd.DataFrame(risk_data)

            fig = px.pie(
                df_risk,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞",
                color_discrete_map={
                    '–í–´–°–û–ö–ò–ô': '#ff0000',
                    '–°–†–ï–î–ù–ò–ô': '#ff9900',
                    '–ù–ò–ó–ö–ò–ô': '#ffcc00',
                    '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô': '#00cc00'
                }
            )
            st.plotly_chart(fig, use_container_width=True,
                            key="risk_distribution_pie_chart")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–∏–ª
    if os.path.exists('rules_analysis_results.json'):
        with open('rules_analysis_results.json', 'r', encoding='utf-8') as f:
            rules_analysis = json.load(f)

        st.markdown("### üïµÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–≤–∏–ª")

        if 'dataset_stats' in rules_analysis:
            stats = rules_analysis['dataset_stats']

            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤",
                          f"{stats.get('total_objects', 0):,}")
            with col2:
                st.metric("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                          f"{stats.get('commercial_objects', 0):,}")
            with col3:
                fraud_rate = stats.get('fraud_rate', 0)
                st.metric("–î–æ–ª—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", f"{fraud_rate:.1%}")
            with col4:
                st.metric("–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ",
                          f"{stats.get('features_analyzed', 0):,}")

    if not os.path.exists('training_report.json'):
        st.warning(
            "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

    if not os.path.exists('rules_analysis_results.json'):
        st.info(
            "üí° –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª: `python analyze_rules.py`")


def render_consensus_tab():
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏ –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π"""
    st.header("üõ°Ô∏è –£–º–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω—ã—Ö –æ–±–≤–∏–Ω–µ–Ω–∏–π")
    st.markdown(
        "**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω**")

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—Ç–µ
    with st.expander("ü§ù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—â–∏—Ç–∞ —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π", expanded=True):
        st.markdown("""
        ### üéØ –ü—Ä–æ–±–ª–µ–º–∞ –ª–æ–∂–Ω—ã—Ö –æ–±–≤–∏–Ω–µ–Ω–∏–π
        
        **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ:** –°–ª—É—á–∞–π–Ω–æ –æ–±–≤–∏–Ω–∏—Ç—å —á–µ—Å—Ç–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ - —ç—Ç–æ:
        - üí∏ **–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —É—â–µ—Ä–±** –¥–ª—è —ç–Ω–µ—Ä–≥–æ–∫–æ–º–ø–∞–Ω–∏–∏
        - üò∞ **–°—Ç—Ä–µ—Å—Å –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω** –∏ –∏—Ö —Å–µ–º–µ–π  
        - ‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã** –∏ –∂–∞–ª–æ–±—ã
        - üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏** –Ω–∞ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        
        ### üõ°Ô∏è –ù–∞—à–∞ –∑–∞—â–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
        
        1. **ü§ù –ö–æ–Ω—Å–µ–Ω—Å—É—Å –º–æ–¥–µ–ª–µ–π** - —Ç—Ä–µ–±—É–µ–º —Å–æ–≥–ª–∞—Å–∏—è 2+ –º–æ–¥–µ–ª–µ–π –∏–∑ 3
        2. **üìä –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–æ—Ä–æ–≥–∏** - –ø–æ–≤—ã—à–∞–µ–º –ø–ª–∞–Ω–∫—É –¥–ª—è –æ–±–≤–∏–Ω–µ–Ω–∏—è  
        3. **üè† –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏** - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö —Å–µ–º–µ–π, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤
        4. **‚öñÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–µ–∑—É–º–ø—Ü–∏–∏ –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç–∏** - –≤ —Å–ø–æ—Ä–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º —á–µ—Å—Ç–Ω—ã–º
        """)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏")

    caution_col1, caution_col2 = st.columns([2, 1])

    with caution_col1:
        caution_level = st.selectbox(
            "üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π:",
            options=['aggressive', 'balanced', 'conservative', 'ultra_safe'],
            index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é conservative
            format_func=lambda x: {
                'aggressive': '‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –±–æ–ª—å—à–µ –Ω–∞—Ö–æ–¥–∏–º, –±–æ–ª—å—à–µ –æ—à–∏–±–∞–µ–º—Å—è (–ø–æ—Ä–æ–≥ 0.5)',
                'balanced': '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π - –∫–æ–º–ø—Ä–æ–º–∏—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã (–ø–æ—Ä–æ–≥ 0.65)',
                'conservative': 'üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π - –∑–∞—â–∏—Ç–∞ —á–µ—Å—Ç–Ω—ã—Ö, –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ (–ø–æ—Ä–æ–≥ 0.8)',
                'ultra_safe': 'üö® –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏ (–ø–æ—Ä–æ–≥ 0.9)'
            }[x],
            help="–ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã, —Ç–µ–º –º–µ–Ω—å—à–µ –ª–æ–∂–Ω—ã—Ö –æ–±–≤–∏–Ω–µ–Ω–∏–π, –Ω–æ –±–æ–ª—å—à–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤"
        )

        from config import CAUTION_LEVELS
        settings = CAUTION_LEVELS[caution_level]

        st.info(f"""
        **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
        - üìä –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: **{settings['threshold']:.2f}**
        - üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: **{settings['expected_precision']:.1%}**
        - üìù {settings['description']}
        """)

    with caution_col2:
        st.markdown("### üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤")
        comparison_data = {
            '–ü–æ–¥—Ö–æ–¥': ['–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π', '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞'],
            '–ù–∞—Ö–æ–¥–∏–º –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤': ['95%', '85%', '70%', '50%'],
            '–õ–æ–∂–Ω—ã–µ –æ–±–≤–∏–Ω–µ–Ω–∏—è': ['25%', '15%', '8%', '3%'],
            '–¢–æ—á–Ω–æ—Å—Ç—å': ['75%', '85%', '92%', '97%']
        }
        st.dataframe(pd.DataFrame(comparison_data), hide_index=True)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    st.markdown("### ü§ù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –º–æ–¥–µ–ª–µ–π")

    consensus_col1, consensus_col2 = st.columns(2)

    with consensus_col1:
        require_consensus = st.checkbox(
            "ü§ù –¢—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏",
            value=True,
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –¥–ª—è –æ–±–≤–∏–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑ 3 –º–æ–¥–µ–ª–µ–π"
        )

        if require_consensus:
            min_agreement = st.slider(
                "üó≥Ô∏è –ú–∏–Ω–∏–º—É–º –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è:",
                min_value=2, max_value=3, value=2,
                help="–°–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —á—Ç–æ–±—ã –ø—Ä–∏–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–º"
            )

            st.success(
                f"‚úÖ –í–∫–ª—é—á–µ–Ω –∫–æ–Ω—Å–µ–Ω—Å—É—Å: –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ {min_agreement} –∏–∑ 3 –º–æ–¥–µ–ª–µ–π")
        else:
            st.warning(
                "‚ö†Ô∏è –ö–æ–Ω—Å–µ–Ω—Å—É—Å –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")

    with consensus_col2:
        st.markdown("### üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –º–æ–¥–µ–ª–µ–π")

        from config import ENSEMBLE_SETTINGS
        st.markdown(f"""
        **–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏:**
        - üöÄ **CatBoost:** {ENSEMBLE_SETTINGS['individual_thresholds']['CatBoost']:.2f}
        - ‚ö° **XGBoost:** {ENSEMBLE_SETTINGS['individual_thresholds']['XGBoost']:.2f}  
        - üå≥ **Random Forest:** {ENSEMBLE_SETTINGS['individual_thresholds']['RandomForest']:.2f}
        
        *–ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥*
        """)

    # –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    st.markdown("### üè† –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω")

    protection_col1, protection_col2 = st.columns(2)

    with protection_col1:
        from config import PROTECTED_CATEGORIES

        enable_protection = st.checkbox(
            "üõ°Ô∏è –í–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –¥–ª—è —É—è–∑–≤–∏–º—ã—Ö –≥—Ä—É–ø–ø",
            value=PROTECTED_CATEGORIES['enable_protection'],
            help="–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö —Å–µ–º–µ–π, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ –∏ —Ç.–¥."
        )

        if enable_protection:
            st.success("‚úÖ –ó–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è:")
            categories = PROTECTED_CATEGORIES['categories']
            st.markdown(f"""
            - üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ú–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–µ —Å–µ–º—å–∏:** {categories['large_family_threshold']}+ –∂–∏—Ç–µ–ª–µ–π
            - üè† **–ú–∞–ª–µ–Ω—å–∫–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:** ‚â§{categories['small_apartment_threshold']} –º¬≤
            - üí° **–ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ:** ‚â§{categories['low_income_consumption']} –∫–í—Ç¬∑—á (–ª—å–≥–æ—Ç–Ω–∏–∫–∏)
            
            **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞:** –ø–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ {PROTECTED_CATEGORIES['protection_multiplier']*100-100:.0f}% + {PROTECTED_CATEGORIES['additional_threshold']*100:.0f}%
            """)
        else:
            st.info("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    with protection_col2:
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞—â–∏—Ç—ã")
        st.markdown("""
        **üè† –°–µ–º—å—è –∏–∑ 5 —á–µ–ª–æ–≤–µ–∫ –≤ 30–º¬≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ:**
        - –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥: 0.80  
        - –° –∑–∞—â–∏—Ç–æ–π: 0.81 √ó 1.2 + 0.05 = **1.02** 
        - ‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–≤–∏–Ω–∏—Ç—å (–ø–æ—Ä–æ–≥ >1.0)
        
        **üí° –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä —Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º 80 –∫–í—Ç¬∑—á:**
        - –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥: 0.80
        - –° –∑–∞—â–∏—Ç–æ–π: 0.80 √ó 1.2 + 0.05 = **1.01**
        - ‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        """)

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.markdown("### üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    test_col1, test_col2 = st.columns(2)

    with test_col1:
        st.markdown("#### üìä –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_data = {
            '–°—Ü–µ–Ω–∞—Ä–∏–π': [
                '–í—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã (0.9, 0.85, 0.88)',
                '–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ (0.85, 0.65, 0.82)',
                '–†–∞–∑–Ω–æ–≥–ª–∞—Å–∏–µ (0.75, 0.45, 0.78)',
                '–ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (0.83, 0.81, 0.79)'
            ],
            '–ë–µ–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞': ['–ú–û–®–ï–ù–ù–ò–ö', '–ú–û–®–ï–ù–ù–ò–ö', '–ú–û–®–ï–ù–ù–ò–ö', '–ú–û–®–ï–ù–ù–ò–ö'],
            '–° –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º': ['–ú–û–®–ï–ù–ù–ò–ö', '–ú–û–®–ï–ù–ù–ò–ö', '–ß–ï–°–¢–ù–´–ô', '–ß–ï–°–¢–ù–´–ô'],
            '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ': [
                '–í—Å–µ –º–æ–¥–µ–ª–∏ —É–≤–µ—Ä–µ–Ω—ã',
                '2 –∏–∑ 3 —Å–æ–≥–ª–∞—Å–Ω—ã',
                '–ù–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ - —Å—á–∏—Ç–∞–µ–º —á–µ—Å—Ç–Ω—ã–º',
                '–ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ø–æ—Ä–æ–≥ –ø–æ–≤—ã—à–µ–Ω'
            ]
        }

        demo_df = pd.DataFrame(demo_data)
        st.dataframe(demo_df, hide_index=True)

    with test_col2:
        st.markdown("#### üéØ –û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç")

        current_settings = f"""
        **–ü—Ä–∏ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ({caution_level}):**
        
        üìà **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**
        - –¢–æ—á–Ω–æ—Å—Ç—å: ~{settings['expected_precision']:.0%}
        - –õ–æ–∂–Ω—ã–µ –æ–±–≤–∏–Ω–µ–Ω–∏—è: ~{(1-settings['expected_precision'])*100:.0f}%
        - –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if require_consensus else '–æ—Ç–∫–ª—é—á–µ–Ω'}
        - –ó–∞—â–∏—Ç–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if enable_protection else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}
        
        üõ°Ô∏è **–ó–∞—â–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç:**
        - –°–Ω–∏–∂–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö –æ–±–≤–∏–Ω–µ–Ω–∏–π –≤ 2-5 —Ä–∞–∑
        - –û—Å–æ–±–∞—è –∑–∞—â–∏—Ç–∞ —É—è–∑–≤–∏–º—ã—Ö –≥—Ä—É–ø–ø
        - –ü—Ä–∏–Ω—Ü–∏–ø "–ª—É—á—à–µ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –≤–∏–Ω–æ–≤–Ω–æ–≥–æ"
        """

        st.info(current_settings)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.markdown("### üíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    settings_col1, settings_col2 = st.columns(2)

    with settings_col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ", type="primary"):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ config
            st.success(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.")

    with settings_col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"):
            st.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")

    # –°–≤–æ–¥–∫–∞
    st.markdown("---")
    st.success(f"""
    ### ‚úÖ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã:
    
    - üõ°Ô∏è **–£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏:** {caution_level.title()} (–ø–æ—Ä–æ–≥ {settings['threshold']:.2f})
    - ü§ù **–ö–æ–Ω—Å–µ–Ω—Å—É—Å –º–æ–¥–µ–ª–µ–π:** {'–í–∫–ª—é—á–µ–Ω' if require_consensus else '–û—Ç–∫–ª—é—á–µ–Ω'}
    - üè† **–ó–∞—â–∏—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:** {'–í–∫–ª—é—á–µ–Ω–∞' if enable_protection else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}
    - üéØ **–û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:** {settings['expected_precision']:.1%}
    
    **–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø:** –õ—É—á—à–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–æ—à–µ–Ω–Ω–∏–∫–∞, —á–µ–º –æ–±–≤–∏–Ω–∏—Ç—å —á–µ—Å—Ç–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è!
    """)


if __name__ == "__main__":
    main()
