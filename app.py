"""
üöÄ ML Fraud Detection System - –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import streamlit as st
import pandas as pd
import json
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from data_analysis import FraudDataAnalyzer, run_full_analysis
from model_training import train_pipeline
from predictor import FraudPredictor
from config import DATA_PATHS, RISK_LEVELS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ML Fraud Detection",
    page_icon="üîç",
    layout="wide"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main {padding: 0rem 1rem;}
    .stAlert {margin-top: 1rem;}
    .fraud-card {
        background-color: #ffcccc;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 2px solid #ff0000;
        margin: 0.5rem 0;
    }
    .safe-card {
        background-color: #ccffcc;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 2px solid #00ff00;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)


def main():
    st.title("üîç ML Fraud Detection System")
    st.markdown("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏**")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üì± –ú–µ–Ω—é")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π
        models = []
        for file in os.listdir('.'):
            if file.endswith('.joblib'):
                models.append(file)

        if models:
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
            selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", models)
        else:
            st.warning(
                "‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ'")
            selected_model = None

        st.markdown("---")
        st.markdown("""
        ### üìñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        - **isCommercial = True** ‚Üí üö® –ú–û–®–ï–ù–ù–ò–ö
        - **isCommercial = False** ‚Üí ‚úÖ –ß–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å
        """)

    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(
        ["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])

    with tab1:
        render_eda_tab()

    with tab2:
        render_training_tab()

    with tab3:
        render_prediction_tab(selected_model)

    with tab4:
        render_monitoring_tab()


def render_eda_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ä–∞–∑–≤–µ–¥–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    st.header("üìä –†–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    col1, col2 = st.columns([2, 1])

    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                analyzer = run_full_analysis()
                st.session_state['analyzer'] = analyzer
                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    with col2:
        if os.path.exists('eda_report.json'):
            with open('eda_report.json', 'r', encoding='utf-8') as f:
                report = json.load(f)

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                data=json.dumps(report, ensure_ascii=False, indent=2),
                file_name=f"eda_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if 'analyzer' in st.session_state:
        analyzer = st.session_state['analyzer']

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3, col4 = st.columns(4)

        stats = analyzer.insights['basic_stats']
        with col1:
            st.metric("–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤", stats['total_objects'])
        with col2:
            st.metric("–ú–æ—à–µ–Ω–Ω–∏–∫–æ–≤", stats['fraudsters'])
        with col3:
            st.metric("% –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤", f"{stats['fraud_rate']*100:.1f}%")
        with col4:
            st.metric("–ë–µ–∑ –ø–ª–æ—â–∞–¥–∏", f"{stats['missing_totalArea_pct']:.1f}%")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø
        st.markdown("### üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ vs —á–µ—Å—Ç–Ω—ã—Ö")

        if 'group_comparison' in analyzer.insights:
            comparison_data = []
            for feature, data in analyzer.insights['group_comparison'].items():
                comparison_data.append({
                    '–ü—Ä–∏–∑–Ω–∞–∫': feature,
                    '–ß–µ—Å—Ç–Ω—ã–µ': f"{data['honest_mean']:.2f}",
                    '–ú–æ—à–µ–Ω–Ω–∏–∫–∏': f"{data['fraud_mean']:.2f}",
                    '–†–∞–∑–Ω–∏—Ü–∞': f"{data['difference_pct']:+.1f}%",
                    '–ó–Ω–∞—á–∏–º–æ—Å—Ç—å': '***' if data['p_value'] < 0.001 else '**' if data['p_value'] < 0.01 else '*' if data['p_value'] < 0.05 else ''
                })

            df_comparison = pd.DataFrame(comparison_data)
            st.dataframe(df_comparison, use_container_width=True)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        st.markdown("### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

        viz_col1, viz_col2 = st.columns(2)

        with viz_col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            fig1 = px.box(
                analyzer.df,
                x='isCommercial',
                y='avg_consumption',
                labels={'isCommercial': '–¢–∏–ø',
                        'avg_consumption': '–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'},
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"
            )
            fig1.update_xaxis(
                ticktext=['–ß–µ—Å—Ç–Ω—ã–µ', '–ú–æ—à–µ–Ω–Ω–∏–∫–∏'], tickvals=[False, True])
            st.plotly_chart(fig1, use_container_width=True)

        with viz_col2:
            # –ì—Ä–∞—Ñ–∏–∫ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            fig2 = px.scatter(
                analyzer.df,
                x='winter_avg',
                y='summer_avg',
                color='isCommercial',
                labels={'winter_avg': '–ó–∏–º–∞', 'summer_avg': '–õ–µ—Ç–æ'},
                title="–°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
                color_discrete_map={False: 'blue', True: 'red'}
            )
            # –õ–∏–Ω–∏—è y=x
            max_val = max(analyzer.df['winter_avg'].max(),
                          analyzer.df['summer_avg'].max())
            fig2.add_trace(
                go.Scatter(x=[0, max_val], y=[0, max_val], mode='lines',
                           line=dict(dash='dash', color='gray'), showlegend=False)
            )
            st.plotly_chart(fig2, use_container_width=True)

        # –ü—Ä–∞–≤–∏–ª–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        if 'fraud_rules' in analyzer.insights:
            st.markdown("### üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª –¥–µ—Ç–µ–∫—Ü–∏–∏")

            rules_data = []
            for rule_name, rule_info in analyzer.insights['fraud_rules'].items():
                rules_data.append({
                    '–ü—Ä–∞–≤–∏–ª–æ': rule_info['description'],
                    '–¢–æ—á–Ω–æ—Å—Ç—å': f"{rule_info['precision']*100:.1f}%",
                    '–ü–æ–∫—Ä—ã—Ç–∏–µ': f"{rule_info['recall']*100:.1f}%",
                    '–ü–æ–π–º–∞–Ω–æ': rule_info['caught']
                })

            df_rules = pd.DataFrame(rules_data)
            st.dataframe(df_rules, use_container_width=True)

    else:
        st.info("üëÜ –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' –¥–ª—è –Ω–∞—á–∞–ª–∞")


def render_training_tab():
    """–í–∫–ª–∞–¥–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    st.header("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        train_path = st.text_input(
            "–ü—É—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º",
            value=DATA_PATHS['train']
        )
        test_path = st.text_input(
            "–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º",
            value=DATA_PATHS['test']
        )
        model_filename = st.text_input(
            "–ò–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏",
            value="fraud_model.joblib"
        )

    with col2:
        st.markdown("### üöÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

        use_gpu = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU", value=True)
        st.info("GPU —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ 5-10 —Ä–∞–∑")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        train_exists = os.path.exists(train_path)
        test_exists = os.path.exists(test_path)

        if train_exists and test_exists:
            st.success("‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
        else:
            if not train_exists:
                st.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {train_path}")
            if not test_exists:
                st.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {test_path}")

    if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary", disabled=not (train_exists and test_exists)):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
            progress = st.progress(0)
            status = st.empty()

            # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            status.text("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            progress.progress(20)

            status.text("üîß Feature engineering...")
            progress.progress(40)

            status.text("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            progress.progress(60)

            # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
            report = train_pipeline(
                train_path=train_path,
                test_path=test_path,
                model_filename=model_filename,
                use_gpu=use_gpu
            )

            progress.progress(100)
            status.text("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success(
                f"‚úÖ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {report['best_model']} (AUC: {report['best_score']:.4f})")

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")

            results_data = []
            for model_name, results in report['models_results'].items():
                results_data.append({
                    '–ú–æ–¥–µ–ª—å': model_name,
                    'CV AUC': f"{results['cv_mean_auc']:.4f} ¬± {results['cv_std_auc']:.4f}"
                })

            if 'test_results' in report:
                for model_name, test_res in report['test_results'].items():
                    for i, row in enumerate(results_data):
                        if row['–ú–æ–¥–µ–ª—å'] == model_name:
                            results_data[i]['Test AUC'] = f"{test_res['auc']:.4f}"
                            results_data[i]['Accuracy'] = f"{test_res['accuracy']:.4f}"

            df_results = pd.DataFrame(results_data)
            st.dataframe(df_results, use_container_width=True)

            # –¢–æ–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if 'top_features' in report:
                st.markdown("### üèÜ –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

                features_df = pd.DataFrame(report['top_features'])
                fig = px.bar(
                    features_df.head(10),
                    x='importance',
                    y='feature',
                    orientation='h',
                    title="–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
                )
                st.plotly_chart(fig, use_container_width=True)


def render_prediction_tab(selected_model):
    """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤")

    if not selected_model:
        st.error("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û–±—É—á–µ–Ω–∏–µ'")
        return

    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
    input_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä"]
    )

    if input_method == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª", type=['json'])

        if uploaded_file is not None:
            data = json.load(uploaded_file)

            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã..."):
                    predictor = FraudPredictor(selected_model)
                    results = predictor.predict(data)

                    st.session_state['predictions'] = results
                    st.success(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –æ–±—ä–µ–∫—Ç–æ–≤")

    elif input_method == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        col1, col2 = st.columns(2)

        with col1:
            account_id = st.text_input("Account ID", value="TEST001")
            building_type = st.selectbox(
                "–¢–∏–ø –∑–¥–∞–Ω–∏—è", ["Apartment", "House", "Other"])
            rooms = st.number_input(
                "–ö–æ–º–Ω–∞—Ç", min_value=1, max_value=10, value=3)
            residents = st.number_input(
                "–ñ–∏—Ç–µ–ª–µ–π", min_value=1, max_value=10, value=2)
            area = st.number_input(
                "–ü–ª–æ—â–∞–¥—å", min_value=0.0, max_value=500.0, value=75.0)

        with col2:
            st.markdown("**–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á):**")
            winter = st.number_input(
                "–ó–∏–º–∞ (—Å—Ä–µ–¥–Ω–µ–µ)", min_value=0, max_value=2000, value=300)
            spring = st.number_input(
                "–í–µ—Å–Ω–∞ (—Å—Ä–µ–¥–Ω–µ–µ)", min_value=0, max_value=2000, value=200)
            summer = st.number_input(
                "–õ–µ—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ)", min_value=0, max_value=2000, value=150)
            autumn = st.number_input(
                "–û—Å–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)", min_value=0, max_value=2000, value=250)

        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
            consumption = {
                "1": winter, "2": winter, "3": spring, "4": spring, "5": spring,
                "6": summer, "7": summer, "8": summer, "9": autumn, "10": autumn,
                "11": autumn, "12": winter
            }

            data = [{
                "accountId": account_id,
                "buildingType": building_type,
                "roomsCount": rooms,
                "residentsCount": residents,
                "totalArea": area if area > 0 else None,
                "consumption": consumption,
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            }]

            predictor = FraudPredictor(selected_model)
            results = predictor.predict(data)
            st.session_state['predictions'] = results

    elif input_method == "üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä":
        examples = {
            "üè™ –ú–∞–≥–∞–∑–∏–Ω (–º–æ—à–µ–Ω–Ω–∏–∫)": {
                "accountId": "SHOP001",
                "buildingType": "Apartment",
                "roomsCount": 2,
                "residentsCount": 1,
                "totalArea": 50,
                "consumption": {str(i): 600 for i in range(1, 13)},
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            },
            "üè† –ß–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è": {
                "accountId": "FAM001",
                "buildingType": "House",
                "roomsCount": 4,
                "residentsCount": 4,
                "totalArea": 120,
                "consumption": {
                    "1": 400, "2": 350, "3": 300, "4": 250, "5": 200,
                    "6": 150, "7": 150, "8": 180, "9": 250, "10": 300,
                    "11": 350, "12": 400
                },
                "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
            }
        }

        selected_example = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:", list(examples.keys()))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∞
        st.json(examples[selected_example])

        if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä", type="primary"):
            predictor = FraudPredictor(selected_model)
            results = predictor.predict([examples[selected_example]])
            st.session_state['predictions'] = results

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'predictions' in st.session_state:
        results = st.session_state['predictions']

        st.markdown("### üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –°–≤–æ–¥–∫–∞
        report = FraudPredictor(selected_model).generate_report(results)

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", report['summary']['total_analyzed'])
        with col2:
            st.metric("–ú–æ—à–µ–Ω–Ω–∏–∫–æ–≤", report['summary']['fraudsters_detected'])
        with col3:
            st.metric("% –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤",
                      f"{report['summary']['fraud_rate']:.1f}%")

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        for result in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            if result['isCommercial']:
                card_class = "fraud-card"
                icon = "üö®"
            else:
                card_class = "safe-card"
                icon = "‚úÖ"

            st.markdown(f"""
            <div class="{card_class}">
                <h4>{icon} {result['accountId']}</h4>
                <p><strong>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞:</strong> {result['fraud_probability_percent']}</p>
                <p><strong>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</strong> {result['risk_level']}</p>
                <p><strong>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</strong> {result['interpretation']}</p>
                <p><strong>–ü–∞—Ç—Ç–µ—Ä–Ω—ã:</strong></p>
                <ul>
                    <li>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {result['patterns']['consumption_level']}</li>
                    <li>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: {result['patterns']['seasonality']}</li>
                    <li>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result['patterns']['stability']}</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        # –≠–∫—Å–ø–æ—Ä—Ç
        st.markdown("### üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                data=json.dumps(results, ensure_ascii=False, indent=2),
                file_name=f"predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

        with col2:
            # CSV —ç–∫—Å–ø–æ—Ä—Ç
            df_export = pd.DataFrame([{
                'accountId': r['accountId'],
                'isCommercial': r['isCommercial'],
                'fraud_probability': r['fraud_probability'],
                'risk_level': r['risk_level']
            } for r in results])

            csv = df_export.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"predictions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )


def render_monitoring_tab():
    """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    st.header("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if os.path.exists('training_report.json'):
        with open('training_report.json', 'r', encoding='utf-8') as f:
            training_report = json.load(f)

        st.markdown("### ü§ñ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å", training_report['best_model'])
        with col2:
            st.metric("Best AUC", f"{training_report['best_score']:.4f}")
        with col3:
            st.metric("–ü—Ä–∏–∑–Ω–∞–∫–æ–≤", training_report['total_features'])

        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        if 'models_results' in training_report:
            models_data = []
            for model, results in training_report['models_results'].items():
                models_data.append({
                    '–ú–æ–¥–µ–ª—å': model,
                    'AUC': results['cv_mean_auc']
                })

            df_models = pd.DataFrame(models_data)

            fig = px.bar(
                df_models,
                x='–ú–æ–¥–µ–ª—å',
                y='AUC',
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ AUC",
                color='AUC',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    if 'predictions' in st.session_state:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")

        predictor = FraudPredictor(st.sidebar.selectbox(
            "", os.listdir('.'), label_visibility="hidden"))
        report = predictor.generate_report(st.session_state['predictions'])

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∏—Å–∫–∞–º
        risk_data = []
        for level, info in report['risk_distribution'].items():
            risk_data.append({
                '–£—Ä–æ–≤–µ–Ω—å': level,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': info['count'],
                '–ü—Ä–æ—Ü–µ–Ω—Ç': info['percentage']
            })

        df_risk = pd.DataFrame(risk_data)

        fig = px.pie(
            df_risk,
            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            names='–£—Ä–æ–≤–µ–Ω—å',
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞",
            color_discrete_map={
                'HIGH': '#ff0000',
                'MEDIUM': '#ff9900',
                'LOW': '#ffcc00',
                'MINIMAL': '#00cc00'
            }
        )
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.info("üìä –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤")


if __name__ == "__main__":
    main()
