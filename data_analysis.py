"""
üìä –ú–æ–¥—É–ª—å —Ä–∞–∑–≤–µ–¥–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (EDA)
"""

import json
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt
from config import FRAUD_RULES, PLOT_THEME


class FraudDataAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ"""

    def __init__(self):
        self.df = None
        self.insights = {}

    def load_data(self, train_path, test_path=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        with open(train_path, 'r', encoding='utf-8') as f:
            train_data = json.load(f)

        all_data = train_data

        if test_path:
            with open(test_path, 'r', encoding='utf-8') as f:
                test_data = json.load(f)
            all_data += test_data

        self.df = self._extract_features(all_data)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} –æ–±—ä–µ–∫—Ç–æ–≤")
        return self.df

    def _extract_features(self, data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ JSON"""
        features = []

        for record in data:
            feature_dict = {
                'accountId': record.get('accountId'),
                'isCommercial': record.get('isCommercial'),
                'buildingType': record.get('buildingType', 'unknown'),
                'roomsCount': record.get('roomsCount', 0),
                'residentsCount': record.get('residentsCount', 0),
                'totalArea': record.get('totalArea'),
                'address': record.get('address', '')
            }

            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            consumption = record.get('consumption', {})
            monthly_values = []

            for month in range(1, 13):
                value = consumption.get(str(month))
                if value is not None and value >= 0:
                    monthly_values.append(value)
                    feature_dict[f'month_{month}'] = value

            if monthly_values:
                feature_dict['avg_consumption'] = np.mean(monthly_values)
                feature_dict['max_consumption'] = max(monthly_values)
                feature_dict['min_consumption'] = min(monthly_values)
                feature_dict['std_consumption'] = np.std(
                    monthly_values) if len(monthly_values) > 1 else 0
                feature_dict['total_consumption'] = sum(monthly_values)
                feature_dict['months_with_data'] = len(monthly_values)

                # –°–µ–∑–æ–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ
                winter = [consumption.get(m, 0) for m in [
                    '12', '1', '2'] if consumption.get(m, 0) > 0]
                summer = [consumption.get(m, 0) for m in [
                    '6', '7', '8'] if consumption.get(m, 0) > 0]

                feature_dict['winter_avg'] = np.mean(winter) if winter else 0
                feature_dict['summer_avg'] = np.mean(summer) if summer else 0
                feature_dict['summer_winter_ratio'] = (
                    feature_dict['summer_avg'] / feature_dict['winter_avg']
                    if feature_dict['winter_avg'] > 0 else 1
                )

                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
                feature_dict['cv'] = feature_dict['std_consumption'] / \
                    feature_dict['avg_consumption'] if feature_dict['avg_consumption'] > 0 else 0

            features.append(feature_dict)

        return pd.DataFrame(features)

    def basic_statistics(self):
        """–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        stats_dict = {
            'total_objects': len(self.df),
            'fraudsters': int(self.df['isCommercial'].sum()),
            'fraud_rate': float(self.df['isCommercial'].mean()),
            'missing_totalArea': int(self.df['totalArea'].isna().sum()),
            'missing_totalArea_pct': float(self.df['totalArea'].isna().mean() * 100)
        }

        self.insights['basic_stats'] = stats_dict

        print("\nüìä –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        for key, value in stats_dict.items():
            print(f"{key}: {value}")

        return stats_dict

    def compare_groups(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π"""
        print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ì–†–£–ü–ü")
        print("=" * 50)

        comparison = {}
        features = ['avg_consumption', 'min_consumption', 'max_consumption',
                    'cv', 'summer_winter_ratio', 'roomsCount', 'residentsCount']

        for feature in features:
            if feature in self.df.columns:
                honest = self.df[self.df['isCommercial']
                                 == False][feature].dropna()
                fraud = self.df[self.df['isCommercial']
                                == True][feature].dropna()

                if len(honest) > 0 and len(fraud) > 0:
                    # T-test
                    t_stat, p_value = stats.ttest_ind(honest, fraud)

                    comparison[feature] = {
                        'honest_mean': float(honest.mean()),
                        'fraud_mean': float(fraud.mean()),
                        'difference_pct': float((fraud.mean() - honest.mean()) / honest.mean() * 100),
                        'p_value': float(p_value),
                        'significant': p_value < 0.05
                    }

                    print(f"\n{feature}:")
                    print(f"  –ß–µ—Å—Ç–Ω—ã–µ: {honest.mean():.2f}")
                    print(f"  –ú–æ—à–µ–Ω–Ω–∏–∫–∏: {fraud.mean():.2f}")
                    print(
                        f"  –†–∞–∑–Ω–∏—Ü–∞: {comparison[feature]['difference_pct']:+.1f}%")
                    print(
                        f"  p-value: {p_value:.4f} {'***' if p_value < 0.001 else '**' if p_value < 0.01 else '*' if p_value < 0.05 else ''}")

        self.insights['group_comparison'] = comparison
        return comparison

    def find_optimal_thresholds(self):
        """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        print("\nüìè –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ü–û–†–û–ì–ò")
        print("=" * 50)

        thresholds = {}

        for feature in ['avg_consumption', 'min_consumption', 'cv']:
            if feature not in self.df.columns:
                continue

            honest = self.df[self.df['isCommercial']
                             == False][feature].dropna()
            fraud = self.df[self.df['isCommercial'] == True][feature].dropna()

            # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
            threshold_range = np.linspace(honest.min(), fraud.max(), 100)
            best_f1 = 0
            best_threshold = 0
            best_metrics = {}

            for threshold in threshold_range:
                if feature == 'cv':  # –î–ª—è CV –º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
                    tp = (fraud <= threshold).sum()
                    fp = (honest <= threshold).sum()
                    fn = (fraud > threshold).sum()
                else:
                    tp = (fraud >= threshold).sum()
                    fp = (honest >= threshold).sum()
                    fn = (fraud < threshold).sum()

                precision = tp / (tp + fp) if (tp + fp) > 0 else 0
                recall = tp / (tp + fn) if (tp + fn) > 0 else 0
                f1 = 2 * precision * recall / \
                    (precision + recall) if (precision + recall) > 0 else 0

                if f1 > best_f1:
                    best_f1 = f1
                    best_threshold = threshold
                    best_metrics = {
                        'precision': precision,
                        'recall': recall,
                        'f1': f1
                    }

            thresholds[feature] = {
                'threshold': float(best_threshold),
                'metrics': best_metrics
            }

            print(f"\n{feature}:")
            print(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {best_threshold:.2f}")
            print(f"  Precision: {best_metrics['precision']:.2%}")
            print(f"  Recall: {best_metrics['recall']:.2%}")
            print(f"  F1-score: {best_metrics['f1']:.2%}")

        self.insights['optimal_thresholds'] = thresholds
        return thresholds

    def apply_fraud_rules(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        print("\nüéØ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–†–ê–í–ò–õ")
        print("=" * 50)

        rules_results = {}

        for rule_name, rule_info in FRAUD_RULES.items():
            mask = rule_info['condition'](self.df)

            precision = self.df[mask]['isCommercial'].mean(
            ) if mask.sum() > 0 else 0
            recall = mask[self.df['isCommercial'] == True].mean() if (
                self.df['isCommercial'] == True).sum() > 0 else 0

            rules_results[rule_name] = {
                'description': rule_info['description'],
                'precision': float(precision),
                'recall': float(recall),
                'caught': int(mask.sum()),
                'fraudsters_caught': int(mask[self.df['isCommercial'] == True].sum())
            }

            print(f"\n{rule_name}: {rule_info['description']}")
            print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {precision:.1%}")
            print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {recall:.1%}")
            print(f"  –ü–æ–π–º–∞–Ω–æ: {mask.sum()} –æ–±—ä–µ–∫—Ç–æ–≤")

        self.insights['fraud_rules'] = rules_results
        return rules_results

    def create_visualizations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å subplots
        fig = make_subplots(
            rows=3, cols=3,
            subplot_titles=(
                '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π', '–¢–∏–ø –∑–¥–∞–Ω–∏—è',
                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º', '–ü—Ä–∞–≤–∏–ª–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏'
            ),
            specs=[
                [{'type': 'box'}, {'type': 'scatter'}, {'type': 'scatter'}],
                [{'type': 'bar'}, {'type': 'box'}, {'type': 'bar'}],
                [{'type': 'histogram'}, {'type': 'bar'}, {'type': 'bar'}]
            ]
        )

        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        for is_commercial in [False, True]:
            label = '–ú–æ—à–µ–Ω–Ω–∏–∫–∏' if is_commercial else '–ß–µ—Å—Ç–Ω—ã–µ'
            data = self.df[self.df['isCommercial']
                           == is_commercial]['avg_consumption']
            fig.add_trace(
                go.Box(y=data, name=label, boxpoints='outliers'),
                row=1, col=1
            )

        # 2. –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Scatter(
                x=self.df[self.df['isCommercial'] == False]['winter_avg'],
                y=self.df[self.df['isCommercial'] == False]['summer_avg'],
                mode='markers',
                name='–ß–µ—Å—Ç–Ω—ã–µ',
                marker=dict(color='blue', size=5, opacity=0.6)
            ),
            row=1, col=2
        )
        fig.add_trace(
            go.Scatter(
                x=self.df[self.df['isCommercial'] == True]['winter_avg'],
                y=self.df[self.df['isCommercial'] == True]['summer_avg'],
                mode='markers',
                name='–ú–æ—à–µ–Ω–Ω–∏–∫–∏',
                marker=dict(color='red', size=8, opacity=0.8)
            ),
            row=1, col=2
        )

        # 3. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        fig.add_trace(
            go.Scatter(
                x=self.df['avg_consumption'],
                y=self.df['cv'],
                mode='markers',
                marker=dict(
                    color=self.df['isCommercial'].astype(int),
                    colorscale='RdBu',
                    size=5,
                    opacity=0.6
                )
            ),
            row=1, col=3
        )

        # 4. –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        months = ['month_1', 'month_2', 'month_3', 'month_4', 'month_5', 'month_6',
                  'month_7', 'month_8', 'month_9', 'month_10', 'month_11', 'month_12']

        for is_commercial in [False, True]:
            monthly_avg = []
            for month in months:
                if month in self.df.columns:
                    values = self.df[self.df['isCommercial']
                                     == is_commercial][month].dropna()
                    monthly_avg.append(values.mean() if len(values) > 0 else 0)

            fig.add_trace(
                go.Bar(x=list(range(1, 13)), y=monthly_avg,
                       name='–ú–æ—à–µ–Ω–Ω–∏–∫–∏' if is_commercial else '–ß–µ—Å—Ç–Ω—ã–µ'),
                row=2, col=1
            )

        # 5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ç–µ–ª–µ–π
        for is_commercial in [False, True]:
            data = self.df[self.df['isCommercial']
                           == is_commercial]['residentsCount']
            fig.add_trace(
                go.Box(y=data, name='–ú–æ—à–µ–Ω–Ω–∏–∫–∏' if is_commercial else '–ß–µ—Å—Ç–Ω—ã–µ'),
                row=2, col=2
            )

        # 6. –¢–∏–ø –∑–¥–∞–Ω–∏—è
        building_stats = self.df.groupby(
            ['buildingType', 'isCommercial']).size().unstack(fill_value=0)
        for col in building_stats.columns:
            fig.add_trace(
                go.Bar(x=building_stats.index, y=building_stats[col],
                       name='–ú–æ—à–µ–Ω–Ω–∏–∫–∏' if col else '–ß–µ—Å—Ç–Ω—ã–µ'),
                row=2, col=3
            )

        # 7. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        for is_commercial in [False, True]:
            data = self.df[self.df['isCommercial']
                           == is_commercial]['min_consumption']
            fig.add_trace(
                go.Histogram(x=data, name='–ú–æ—à–µ–Ω–Ω–∏–∫–∏' if is_commercial else '–ß–µ—Å—Ç–Ω—ã–µ',
                             opacity=0.7, nbinsx=30),
                row=3, col=1
            )

        # 8. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ–º
        numeric_cols = self.df.select_dtypes(include=[np.number]).columns
        correlations = self.df[numeric_cols].corrwith(
            self.df['isCommercial']).abs().sort_values(ascending=False).head(10)

        fig.add_trace(
            go.Bar(x=correlations.values, y=correlations.index, orientation='h'),
            row=3, col=2
        )

        # 9. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª
        if 'fraud_rules' in self.insights:
            rules_data = self.insights['fraud_rules']
            rule_names = list(rules_data.keys())
            precisions = [rules_data[r]['precision'] for r in rule_names]
            recalls = [rules_data[r]['recall'] for r in rule_names]

            fig.add_trace(
                go.Bar(x=rule_names, y=precisions, name='Precision'),
                row=3, col=3
            )
            fig.add_trace(
                go.Bar(x=rule_names, y=recalls, name='Recall'),
                row=3, col=3
            )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        fig.update_layout(
            height=1200,
            showlegend=True,
            title_text="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞",
            title_font_size=20,
            template=PLOT_THEME['template']
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        fig.write_html('eda_visualizations.html')
        print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ eda_visualizations.html")

        return fig

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏"""
        report = {
            'analysis_date': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
            'dataset_info': self.insights.get('basic_stats', {}),
            'group_comparison': self.insights.get('group_comparison', {}),
            'optimal_thresholds': self.insights.get('optimal_thresholds', {}),
            'fraud_rules': self.insights.get('fraud_rules', {}),
            'key_findings': [
                "–ú–æ—à–µ–Ω–Ω–∏–∫–∏ –∏–º–µ—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
                "–£ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–Ω–∏–∑–∫–∏–π CV)",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ - –≤–∞–∂–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ > 50 –∫–í—Ç¬∑—á - —Å–∏–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"
            ]
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open('eda_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

        print("\n‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ eda_report.json")
        return report


def run_full_analysis(train_path='data/dataset_train.json', test_path='data/dataset_test.json'):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = FraudDataAnalyzer()

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    analyzer.load_data(train_path, test_path)

    # 2. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    analyzer.basic_statistics()

    # 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    analyzer.compare_groups()

    # 4. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    analyzer.find_optimal_thresholds()

    # 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
    analyzer.apply_fraud_rules()

    # 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    analyzer.create_visualizations()

    # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    analyzer.generate_report()

    return analyzer


if __name__ == "__main__":
    analyzer = run_full_analysis()
