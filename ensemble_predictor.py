"""
ü§ù –ê–Ω—Å–∞–º–±–ª—å –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
"""

import json
import pandas as pd
import numpy as np
import joblib
from typing import Dict, List, Union, Optional
from config import (CLASSIFICATION_THRESHOLDS, ENSEMBLE_SETTINGS,
                    PROTECTED_CATEGORIES, CAUTION_LEVELS, RISK_LEVELS)


class EnsemblePredictor:
    """–ê–Ω—Å–∞–º–±–ª—å –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π"""

    def __init__(self, ensemble_path: str, caution_level: str = 'conservative'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π

        Args:
            ensemble_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–Ω—Å–∞–º–±–ª–µ–º –º–æ–¥–µ–ª–µ–π
            caution_level: –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ ('aggressive', 'balanced', 'conservative', 'ultra_safe')
        """
        self.ensemble_data = joblib.load(ensemble_path)
        self.models = self.ensemble_data['models']
        self.feature_engineer = self.ensemble_data['feature_engineer']
        self.feature_names = self.ensemble_data.get('feature_names', [])
        self.best_model = self.ensemble_data.get('best_model', 'Unknown')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
        self.caution_level = caution_level
        self.caution_settings = CAUTION_LEVELS.get(
            caution_level, CAUTION_LEVELS['conservative'])
        self.base_threshold = self.caution_settings['threshold']

        print(f"ü§ù –ó–∞–≥—Ä—É–∂–µ–Ω –∞–Ω—Å–∞–º–±–ª—å –∏–∑ {len(self.models)} –º–æ–¥–µ–ª–µ–π")
        print(f"üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏: {caution_level}")
        print(f"üìä –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥: {self.base_threshold:.2f}")
        print(
            f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {self.caution_settings['expected_precision']:.1%}")

    def predict(self, data: Union[List[Dict], Dict],
                custom_threshold: Optional[float] = None,
                require_consensus: bool = None,
                detailed: bool = True) -> List[Dict]:
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º –º–æ–¥–µ–ª–µ–π –∏ –∑–∞—â–∏—Ç–æ–π —á–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
        detailed: –µ—Å–ª–∏ False ‚Äî —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è + isCommercial
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        if isinstance(data, dict):
            data = [data]

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df = self.feature_engineer.extract_features(data)
        X = df[self.feature_names]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        if require_consensus is None:
            require_consensus = ENSEMBLE_SETTINGS['require_consensus']

        results = []
        for i, record in enumerate(data):
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
            model_predictions = self._get_all_model_predictions(X.iloc[i:i+1])

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            final_prediction = self._apply_consensus(
                model_predictions,
                custom_threshold or self.base_threshold,
                require_consensus
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            adjusted_prediction = self._check_protected_categories(
                final_prediction, record, df.iloc[i]
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = self._format_result(
                record, i, adjusted_prediction, model_predictions, detailed=detailed
            )

            results.append(result)

        return results

    def _get_all_model_predictions(self, X_sample: pd.DataFrame) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        predictions = {
            'probabilities': {},
            'binary_predictions': {},
            'individual_decisions': {}
        }

        for model_name, model_data in self.models.items():
            try:
                model = model_data['model']

                # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                prob = model.predict_proba(X_sample)[0, 1]
                predictions['probabilities'][model_name] = float(prob)

                # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                individual_threshold = ENSEMBLE_SETTINGS['individual_thresholds'].get(
                    model_name, self.base_threshold
                )

                # –ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                binary_pred = prob >= individual_threshold
                predictions['binary_predictions'][model_name] = binary_pred

                # –†–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ—Ä–æ–≥–∞
                predictions['individual_decisions'][model_name] = {
                    'probability': prob,
                    'threshold_used': individual_threshold,
                    'decision': binary_pred,
                    'confidence': abs(prob - 0.5) * 2  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
                }

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
                predictions['probabilities'][model_name] = 0.0
                predictions['binary_predictions'][model_name] = False
                predictions['individual_decisions'][model_name] = {
                    'probability': 0.0,
                    'threshold_used': self.base_threshold,
                    'decision': False,
                    'confidence': 0.0
                }

        return predictions

    def _apply_consensus(self, model_predictions: Dict, threshold: float,
                         require_consensus: bool) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
        probabilities = list(model_predictions['probabilities'].values())
        binary_decisions = list(
            model_predictions['binary_predictions'].values())

        if not probabilities:
            return {
                'final_probability': 0.0,
                'final_decision': False,
                'consensus_reached': False,
                'agreement_level': 0.0,
                'decision_method': 'error'
            }

        # –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        avg_probability = np.mean(probabilities)

        # –£—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–∏—è
        positive_votes = sum(binary_decisions)
        total_models = len(binary_decisions)
        agreement_level = positive_votes / total_models if total_models > 0 else 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_threshold = ENSEMBLE_SETTINGS['consensus_threshold']
        min_models_agree = ENSEMBLE_SETTINGS['min_models_agree']

        consensus_reached = (
            agreement_level >= consensus_threshold and
            positive_votes >= min_models_agree
        )

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if require_consensus:
            # –°—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å - —Ç—Ä–µ–±—É–µ–º —Å–æ–≥–ª–∞—Å–∏—è
            if consensus_reached:
                final_decision = avg_probability >= threshold
                decision_method = 'strict_consensus'
            else:
                # –ù–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á–µ—Å—Ç–Ω—ã–º (–∑–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–∂–Ω—ã—Ö –æ–±–≤–∏–Ω–µ–Ω–∏–π!)
                final_decision = False
                decision_method = 'no_consensus_safe'
        else:
            # –ú—è–≥–∫–∏–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            final_decision = avg_probability >= threshold
            decision_method = 'averaged_probability'

        return {
            'final_probability': avg_probability,
            'final_decision': final_decision,
            'consensus_reached': consensus_reached,
            'agreement_level': agreement_level,
            'positive_votes': positive_votes,
            'total_models': total_models,
            'decision_method': decision_method,
            'individual_probabilities': model_predictions['probabilities']
        }

    def _check_protected_categories(self, prediction: Dict, record: Dict,
                                    features: pd.Series) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥—Ä–∞–∂–¥–∞–Ω"""
        if not PROTECTED_CATEGORIES['enable_protection']:
            return prediction

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        adjusted = prediction.copy()
        protection_applied = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—â–∏—Ç—ã
        categories = PROTECTED_CATEGORIES['categories']

        # 1. –ú–Ω–æ–≥–æ–¥–µ—Ç–Ω–∞—è —Å–µ–º—å—è
        residents = record.get('residentsCount', 1)
        if residents >= categories['large_family_threshold']:
            protection_applied.append('large_family')

        # 2. –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –ª—å–≥–æ—Ç–Ω–∏–∫–∏)
        area = record.get('totalArea', 100)
        if area and area <= categories['small_apartment_threshold']:
            protection_applied.append('small_apartment')

        # 3. –ù–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ –ª—å–≥–æ—Ç–Ω–∏–∫–∏)
        avg_consumption = features.get('avg_consumption', 0)
        if avg_consumption <= categories['low_income_consumption']:
            protection_applied.append('low_consumption')

        # 4. –ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ - –ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è
        if protection_applied:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            multiplier = PROTECTED_CATEGORIES['protection_multiplier']
            additional = PROTECTED_CATEGORIES['additional_threshold']

            original_threshold = self.base_threshold
            protected_threshold = (
                original_threshold * multiplier) + additional

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
            if adjusted['final_probability'] < protected_threshold:
                adjusted['final_decision'] = False
                adjusted['protection_applied'] = True
                adjusted['protection_reasons'] = protection_applied
                adjusted['original_threshold'] = original_threshold
                adjusted['protected_threshold'] = protected_threshold
                adjusted['decision_method'] = f"{adjusted['decision_method']}_protected"
            else:
                adjusted['protection_applied'] = False
        else:
            adjusted['protection_applied'] = False

        return adjusted

    def _format_result(self, record: Dict, index: int, prediction: Dict,
                       model_predictions: Dict, detailed: bool = True) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        fraud_prob = prediction['final_probability']
        is_fraud = prediction['final_decision']

        if not detailed:
            # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è + isCommercial –ø–æ—Å–ª–µ accountId
            result = {}
            for k, v in record.items():
                result[k] = v
                if k == 'accountId':
                    result['isCommercial'] = is_fraud
            if 'accountId' not in record:
                result = {'isCommercial': is_fraud, **record}
            return result

        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        result = {
            'accountId': record.get('accountId', f'UNKNOWN_{index}'),
            'isCommercial': is_fraud,
            'fraud_probability': fraud_prob,
            'fraud_probability_percent': f"{fraud_prob * 100:.1f}%",
            'risk_level': self._get_risk_level(fraud_prob),
            'interpretation': self._get_interpretation(is_fraud, fraud_prob, prediction),
            'consensus_details': {
                'agreement_level': f"{prediction['agreement_level']:.1%}",
                'positive_votes': f"{prediction['positive_votes']}/{prediction['total_models']}",
                'consensus_reached': prediction['consensus_reached'],
                'decision_method': prediction['decision_method']
            },
            'individual_models': model_predictions['individual_decisions'],
            'protection_applied': prediction.get('protection_applied', False),
            'protection_reasons': prediction.get('protection_reasons', []),
            'caution_level': self.caution_level,
            'threshold_used': prediction.get('protected_threshold', self.base_threshold)
        }
        return result

    def _get_risk_level(self, probability: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        for level, info in RISK_LEVELS.items():
            if probability >= info['threshold']:
                return level
        return 'MINIMAL'

    def _get_interpretation(self, is_fraud: bool, probability: float,
                            prediction_details: Dict) -> str:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        consensus = prediction_details.get('consensus_reached', False)
        method = prediction_details.get('decision_method', 'unknown')
        protected = prediction_details.get('protection_applied', False)

        if is_fraud:
            if consensus and probability > 0.9:
                base = "üö® –ö–û–ù–°–ï–ù–°–£–° –ú–û–î–ï–õ–ï–ô: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è"
            elif consensus and probability > 0.8:
                base = "‚ö†Ô∏è –ö–û–ù–°–ï–ù–°–£–° –ú–û–î–ï–õ–ï–ô: –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è"
            elif probability > 0.8:
                base = "üìç –í–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞)"
            else:
                base = "‚ùì –í–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"

            if protected:
                base += " | üõ°Ô∏è –ü–†–û–í–ï–†–ï–ù –∑–∞—â–∏—Ç–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
        else:
            if method == 'no_consensus_safe':
                base = "‚úÖ –ù–ï–¢ –ö–û–ù–°–ï–ù–°–£–°–ê - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ—Ç—Å—è —á–µ—Å—Ç–Ω—ã–º (–∑–∞—â–∏—Ç–Ω–∞—è –º–µ—Ä–∞)"
            elif protected:
                base = "‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
            elif probability < 0.2:
                base = "‚úÖ –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å (–≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã)"
            elif probability < 0.4:
                base = "‚úÖ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å"
            else:
                base = "‚ùì –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π - –Ω–æ –ø–æ—Ä–æ–≥ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç"

        return base

    def get_model_explanations(self, results: List[Dict]) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Ä–µ—à–µ–Ω–∏–π –º–æ–¥–µ–ª–µ–π"""
        explanations = {
            'caution_settings': self.caution_settings,
            'ensemble_settings': ENSEMBLE_SETTINGS,
            'protection_settings': PROTECTED_CATEGORIES,
            'models_performance': {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        for model_name, model_data in self.models.items():
            explanations['models_performance'][model_name] = {
                'cv_score': model_data.get('cv_score', 0),
                'individual_threshold': ENSEMBLE_SETTINGS['individual_thresholds'].get(
                    model_name, self.base_threshold
                )
            }

        return explanations

    def update_caution_level(self, new_level: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"""
        if new_level in CAUTION_LEVELS:
            self.caution_level = new_level
            self.caution_settings = CAUTION_LEVELS[new_level]
            self.base_threshold = self.caution_settings['threshold']
            print(f"üõ°Ô∏è –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_level}")
            print(f"üìä –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥: {self.base_threshold:.2f}")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}")
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(CAUTION_LEVELS.keys())}")


def predict_with_ensemble(data_path: str,
                          ensemble_path: str = 'fraud_detection_model_ensemble.joblib',
                          caution_level: str = 'conservative') -> str:
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∞–Ω—Å–∞–º–±–ª–µ–º"""
    predictor = EnsemblePredictor(ensemble_path, caution_level)

    with open(data_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    results = predictor.predict(data)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(results)
    fraudsters = sum(1 for r in results if r['isCommercial'])
    protected = sum(1 for r in results if r.get('protection_applied', False))
    consensus_cases = sum(
        1 for r in results if r['consensus_details']['consensus_reached'])

    print(f"\nü§ù –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–°–ê–ú–ë–õ–Ø (—É—Ä–æ–≤–µ–Ω—å: {caution_level.upper()})")
    print("=" * 60)
    print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total}")
    print(f"–í—ã—è–≤–ª–µ–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π: {fraudsters} ({fraudsters/total*100:.1f}%)")
    print(
        f"–ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {consensus_cases} ({consensus_cases/total*100:.1f}%)")
    print(f"–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {protected} ({protected/total*100:.1f}%)")

    return json.dumps(results, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    results = predict_with_ensemble(
        'test_data.json', caution_level='conservative')
