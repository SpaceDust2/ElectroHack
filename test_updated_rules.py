"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
"""

import json
from feature_engineering import FeatureEngineer
from config import FRAUD_RULES
import pandas as pd
import numpy as np


def create_test_cases():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤"""

    # –°–ª—É—á–∞–π 1: –Ø–≤–Ω—ã–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å (–º–∞–≥–∞–∑–∏–Ω –ø–æ–¥ –≤–∏–¥–æ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã)
    fraudster_case = {
        "accountId": "–ú–û–®–ï–ù–ù–ò–ö_001",
        "buildingType": "Apartment",
        "roomsCount": 2,
        "residentsCount": 1,
        "totalArea": 50,
        "consumption": {
            # –í—ã—Å–æ–∫–æ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ (–Ω–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏)
            "1": 3500, "2": 3600, "3": 3400, "4": 3300,  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
            "5": 3200, "6": 3100, "7": 3000, "8": 3100,  # –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            "9": 3200, "10": 3400, "11": 3500, "12": 3600  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
        },
        "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "isCommercial": True
    }

    # –°–ª—É—á–∞–π 2: –ß–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è
    honest_case = {
        "accountId": "–ß–ï–°–¢–ù–´–ô_001",
        "buildingType": "House",
        "roomsCount": 4,
        "residentsCount": 4,
        "totalArea": 120,
        "consumption": {
            # –°–µ–∑–æ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: –∑–∏–º–æ–π –±–æ–ª—å—à–µ, –ª–µ—Ç–æ–º –º–µ–Ω—å—à–µ
            "1": 450, "2": 400, "3": 350, "4": 300,  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
            "5": 200, "6": 150, "7": 140, "8": 160,  # –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            "9": 250, "10": 350, "11": 400, "12": 450  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
        },
        "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "isCommercial": False
    }

    # –°–ª—É—á–∞–π 3: –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π (–≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–æ —Å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å—é)
    borderline_case = {
        "accountId": "–ü–û–ì–†–ê–ù–ò–ß–ù–´–ô_001",
        "buildingType": "House",
        "roomsCount": 5,
        "residentsCount": 3,
        "totalArea": 150,
        "consumption": {
            # –í—ã—Å–æ–∫–æ–µ –Ω–æ —Å–µ–∑–æ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
            "1": 800, "2": 750, "3": 600, "4": 500,  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
            "5": 300, "6": 250, "7": 200, "8": 220,  # –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            "9": 400, "10": 600, "11": 700, "12": 800  # –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω
        },
        "address": "–≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "isCommercial": False
    }

    return [fraudster_case, honest_case, borderline_case]


def test_feature_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í")
    print("=" * 50)

    test_cases = create_test_cases()
    engineer = FeatureEngineer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    df = engineer.extract_features(test_cases)

    for i, case in enumerate(test_cases):
        print(f"\nüìä {case['accountId']}:")
        row = df.iloc[i]

        # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        print(f"   –û—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω: {row['heating_season']:.1f} –∫–í—Ç¬∑—á")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {row['avg_consumption']:.1f} –∫–í—Ç¬∑—á")
        print(
            f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {row['min_consumption']:.1f} –∫–í—Ç¬∑—á")
        print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {row['cv']:.3f}")
        print(f"   –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–µ—Ç–æ/–∑–∏–º–∞: {row['summer_winter_ratio']:.3f}")
        print(
            f"   –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –∂–∏—Ç–µ–ª—è: {row['consumption_per_resident']:.1f} –∫–í—Ç¬∑—á")
        print(
            f"   –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω: {row['high_heating_consumption']}")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {row['no_seasonality']}")

    return df


def test_fraud_rules(df):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í–ò–õ –î–ï–¢–ï–ö–¶–ò–ò")
    print("=" * 50)

    for rule_name, rule_info in FRAUD_RULES.items():
        print(f"\nüìè {rule_name}: {rule_info['description']}")

        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ
            mask = rule_info['condition'](df)
            triggered = df[mask]

            print(f"   –°—Ä–∞–±–æ—Ç–∞–ª–æ –¥–ª—è: {len(triggered)} –∏–∑ {len(df)} –æ–±—ä–µ–∫—Ç–æ–≤")

            if len(triggered) > 0:
                for idx in triggered.index:
                    account_id = df.loc[idx, 'accountId']
                    is_commercial = df.loc[idx, 'isCommercial']
                    status = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if is_commercial else "‚ùå –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"
                    print(f"     - {account_id}: {status}")
            else:
                print("     - –ù–∏–∫–æ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª–æ")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ: {e}")


def calculate_rule_effectiveness(df):
    """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª"""
    print("\nüìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–†–ê–í–ò–õ")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ
    results = {}

    for rule_name, rule_info in FRAUD_RULES.items():
        try:
            mask = rule_info['condition'](df)

            tp = len(df[mask & df['isCommercial']])  # True Positive
            fp = len(df[mask & ~df['isCommercial']])  # False Positive
            fn = len(df[~mask & df['isCommercial']])  # False Negative
            tn = len(df[~mask & ~df['isCommercial']])  # True Negative

            precision = tp / (tp + fp) if (tp + fp) > 0 else 0
            recall = tp / (tp + fn) if (tp + fn) > 0 else 0
            f1 = 2 * precision * recall / \
                (precision + recall) if (precision + recall) > 0 else 0

            results[rule_name] = {
                'precision': precision,
                'recall': recall,
                'f1': f1,
                'tp': tp,
                'fp': fp
            }

            print(f"\n{rule_name}:")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {precision:.2%}")
            print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {recall:.2%}")
            print(f"   F1-–º–µ—Ä–∞: {f1:.3f}")
            print(f"   –ü–æ–π–º–∞–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π: {tp}")
            print(f"   –õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {fp}")

        except Exception as e:
            print(f"{rule_name}: –û—à–∏–±–∫–∞ - {e}")

    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ (–ª—é–±–æ–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ)
    combined_mask = False
    for rule_name, rule_info in FRAUD_RULES.items():
        try:
            mask = rule_info['condition'](df)
            combined_mask = combined_mask | mask
        except:
            continue

    tp_comb = len(df[combined_mask & df['isCommercial']])
    fp_comb = len(df[combined_mask & ~df['isCommercial']])
    fn_comb = len(df[~combined_mask & df['isCommercial']])

    precision_comb = tp_comb / \
        (tp_comb + fp_comb) if (tp_comb + fp_comb) > 0 else 0
    recall_comb = tp_comb / \
        (tp_comb + fn_comb) if (tp_comb + fn_comb) > 0 else 0

    print(f"\nüéØ –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–û–ï –ü–†–ê–í–ò–õ–û:")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {precision_comb:.2%}")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {recall_comb:.2%}")
    print(f"   –ü–æ–π–º–∞–Ω–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π: {tp_comb}")
    print(f"   –õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {fp_comb}")

    return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    try:
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df = test_feature_extraction()

        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        test_fraud_rules(df)

        # 3. –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        effectiveness = calculate_rule_effectiveness(df)

        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)
        print("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("   - –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   - –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("   - –ö–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ 'heating_season' —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   - –ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–µ–π—Å—É")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è
        fraudster_row = df[df['accountId'] == '–ú–û–®–ï–ù–ù–ò–ö_001'].iloc[0]
        if fraudster_row['heating_season'] > 3000:
            print("   ‚úÖ –ù–∞—Ä—É—à–∏—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º—É —Å–µ–∑–æ–Ω—É")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è")

        honest_row = df[df['accountId'] == '–ß–ï–°–¢–ù–´–ô_001'].iloc[0]
        if honest_row['heating_season'] < 3000:
            print("   ‚úÖ –ß–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Å—Ç–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
